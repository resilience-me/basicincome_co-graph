{"changed":true,"filter":false,"title":"graph_script.js","tooltip":"/basicincome_co/graph_script.js","value":" var module = angular.module('app')\n\n \n \n  module.controller('visualizationCtrl', ['$rootScope', '$network', '$vaultClient', '$MongoDB',\n    function ($scope, $network, $vaultClient, $MongoDB)\n  {\n  \t\n$scope.network_type = \"Safety Net\"\n\n$scope.change_views = function() { //not in use \n$scope.switcher = !$scope.switcher\n}\n$scope.change_to_safety_net_pathways = function() {  \n$scope.switcher = false\n$scope.network_type = \"Safety Net\"\n$MongoDB.type1()\nconsole.log(\"viewing safety nets\")\n}\n$scope.change_to_dividend_pathways = function() {  \n$scope.switcher = true\n$scope.network_type = \"Dividend Pathways\"\n\n$MongoDB.type2()\n\nconsole.log(\"viewing dividend pathways\")\n\n}\n\n$scope.submit = function(address){\n\tconsole.log(\"testt\"+$scope.address)\n\n\t$scope.changeMode('individual')\n\t$scope.name_to_address(address, true)\n\tchange_color()\n}\n\n\n\n    $network.shout()\n    console.log(\"hej\")\n\n// Javascript for the visualization, using the D3 library -->\n// CONSTANTS\nvar UNIX_RIPPLE_TIME = 946684800;\nvar RECURSION_DEPTH = 1;\nvar MAX_NUTL = 360;\nvar REFERENCE_NODE = 'rLaKjMvLbrAJwnH4VpawQ6ot9epZqJmbfQ';\nvar HALO_MARGIN = 6;\nvar COLOR_TABLE = {\n//currency  |  center  |   rim  |\n\t\"__Z\": [[\"#dfe0e1\",\"#999999\"], //degree 0\n/*GRAY*/  [\"#ebecec\",\"#aaa9a9\"], //degree 1\n          [\"#ededee\",\"#bcbbbb\"], //etc.\n          [\"#f3f4f4\",\"#d0cece\"],\n          [\"#fdfdfe\",\"#e5e4e3\"]],\n\t\t\t\n\t\"__N\": [[\"#f05656\",\"#ee2d2c\"],\n/*RED*/\t  [\"#f37a6f\",\"#f16249\"],\n          [\"#f6998b\",\"#f5886d\"],\n          [\"#fab9ac\",\"#f9ad95\"],\n          [\"#fddad1\",\"#fcd4c4\"]],\n\t\t\t\n\t\"BTC\": [[\"#f9b120\",\"#b76f2f\"],\n/*ORANGE*/[\"#e5af65\",\"#c38a57\"],\n          [\"#e9c189\",\"#d0a57e\"],\n          [\"#edd2ad\",\"#dcbfa6\"],\n          [\"#f1e4d1\",\"#e9dacd\"]],\n\t\t\t\n\t\"CNY\": [[\"#fcf5a1\",\"#fedb3d\"],\n/*YELLOW*/[\"#fdf7b4\",\"#ffe069\"],\n          [\"#fdf7c4\",\"#ffe68d\"],\n          [\"#fefad8\",\"#ffed83\"],\n          [\"#fffcea\",\"#fff5d6\"]],\n\t\t\t\n\t\"USD\": [[\"#99cc66\",\"#669940\"],\n/*LIME*/  [\"#acd585\",\"#82a85d\"],\n          [\"#c0dea1\",\"#9eb880\"],\n          [\"#d4e8be\",\"#bbcba4\"],\n          [\"#e8f2dd\",\"#dae1cd\"]],\n\t\t\t\n\t\"AUD\": [[\"#8dc198\",\"#609869\"],\n/*GREEN*/ [\"#a2cbab\",\"#7eab85\"],\n          [\"#b7d6bd\",\"#9cbda1\"],\n          [\"#cbe0d0\",\"#b9d0bd\"],\n          [\"#e0ebe2\",\"#d7e2d9\"]],\n\t\t\t\n\t\"XRP\": [[\"#55a7cc\",\"#346aa9\"],\n/*BLUE*/  [\"#83b8d6\",\"#5083b9\"],\n          [\"#a7cae1\",\"#7ba1cb\"],\n          [\"#d0e1ed\",\"#a3c2dd\"],\n          [\"#f2f6fa\",\"#cee8f1\"]],\n\t\t\t\n\t\"___\": [[\"#6566ae\",\"#363795\"], //I.e., any other currency.\n/*INDIGO*/[\"#7e7cbb\",\"#5855a5\"],\n          [\"#9896c9\",\"#7a74b6\"],\n          [\"#b6b4da\",\"#9e99cb\"],\n          [\"#d7d6eb\",\"#c9c6e3\"]],\n\t\t\t\n\t\"CAD\": [[\"#8e68ad\",\"#673695\"],\n/*VIOLET*/[\"#9f80ba\",\"#7d58a5\"],\n          [\"#8e68ad\",\"#673695\"],\n          [\"#c8b8da\",\"#b29ecc\"],\n          [\"#e0d8eb\",\"#d4cae4\"]],\n\t\t\t\n\t\"EUR\": [[\"#b76e99\",\"#863d66\"],\n/*PINK*/  [\"#c389ab\",\"#9c6283\"],\n          [\"#d0a4be\",\"#b2879f\"],\n          [\"#dcbfd0\",\"#c9abbc\"],\n          [\"#d9dae3\",\"#dfd0d8\"]],\n          \n   \"DIV\":  [[\"#f9b120\",\"#b76f2f\"],/*dividend-pathway*/\n\t\t  [\"#e5af65\",\"#c38a57\"],\n          [\"#e9c189\",\"#d0a57e\"],\n          [\"#edd2ad\",\"#dcbfa6\"],\n          [\"#f1e4d1\",\"#e9dacd\"]],\n\t\"SAF\": [[\"#55a7cc\",\"#346aa9\"],\n\t      [\"#83b8d6\",\"#5083b9\"], //safety net\n          [\"#a7cae1\",\"#7ba1cb\"],\n          [\"#d0e1ed\",\"#a3c2dd\"],\n          [\"#f2f6fa\",\"#cee8f1\"]],\n};\n          \nvar HIGH_SATURATION_COLORS = {\n\t\"__N\": \"#f00\", //RED\t\n\t\"BTC\": \"#fa0\", //ORANGE\n\t\"CNY\": \"#af0\", //YELLOW\n\t\"USD\": \"#0f0\", //LIME\n\t\"AUD\": \"#0fa\", //GREEN\n\t\"XRP\": \"#0af\", //BLUE\n\t\"___\": \"#00f\", //INDIGO\n\t\"CAD\": \"#a0f\", //VIOLET\n\t\"EUR\": \"#f0a\",  //PINK\n\t\"DIV\": \"#f0a\",  //PINK\n\t\"SAF\": \"#0af\"  //PINK\n\n};\nvar HEX_TO_PERCENT = {\"0\":0,\"a\":0.67,\"f\":1};\n\nvar REQUEST_REPETITION_INTERVAL = 8*1000; //milliseconds\n\n\n\nvar param = window.location.hash.replace(/\\W/g, '');\n\nvar alreadyFailed = false;\nvar focalNode;\nvar transaction_id;\n\nvar changingFocus = false;\n\nif (param == \"\") {\n\tfocalNode = REFERENCE_NODE;\n} else if (param.charAt(0) == \"r\" ) {\n\tfocalNode = param;\n} else if (\"0123456789ABCDEF\".indexOf(param.charAt(0)) != -1) {\n\ttransaction_id = param;\n} else if (param.charAt(0) == \"u\" && Sha1.hash(param) == \"7d0b25cc0abdcc216e9f26b078c0cb5c9032ed8c\") {\n\t//Easter egg!\n\tRECURSION_DEPTH = 999999999;\n\tfocalNode = REFERENCE_NODE;\n} else {\n\tfocalNode = REFERENCE_NODE;\n}\n\n\nfunction gotoThing() {\n  var string = $('#focus').val().replace(/\\s+/g, '');\n  if (string.length === 64) {\n    console.log(\"HELLO!\");\n    eraseGraph();\n    window.location.hash = string;\n    remote.request_tx(string, handleIndividualTransaction);\n  } else {\n    changeMode('individual');\n    refocus(string,true);\n  }\n}\n\n\nvar lastFocalNode = REFERENCE_NODE;\nvar currentCurrency = \"XRP\";\nvar currentLedger = {ledger_current_index: 2011754};\nvar w = 935;  //Width\nvar h = 1085; //Height\nvar hh = 710; //Height above the bottom bar\n\nvar nodes = [ {x:w/2, y:hh/2, account:{Account:focalNode, Balance:0}, trustLines:[], balances:{} }];\nvar le_links = [];\nvar nodeMap = {};\nnodeMap[focalNode] = 0;\nvar degreeMap = {};\ndegreeMap[focalNode] = 0;\nvar expandedNodes = {};\nvar provisionallyExpandedNodes = {};\nvar txx;\nvar firstTime = true;\n\n\n\n\n// Setup ripple-lib\nvar Remote = ripple.Remote;\nvar remote = new Remote({\n\ttrace: false,\n\ttrusted: true,\n\tlocal_signing: true,\n\tconnection_offest: 60,\n\tservers: [{ \n\t\thost: 's1.ripple.com'\n\t\t, port: 443\n\t\t, secure: true, pool: 3\n\t}]\n});\n\n//basicincome\n// Setup vaultClient\nvar vaultClient = new ripple2.VaultClient();\n\n//Opening sequence:\nremote.connect(function() {\n\t//Subscriptions\n\tremote.on('ledger_closed', function(x,y){\n\t\tcurrentLedger = x;\n\t\t$(\"#ledgernumber\").text(commas(parseInt(currentLedger.ledger_index)));\n\t\tremote.request_ledger('closed', handleLedger);\n\t});\n\tremote.on('transaction_all', handleTransaction);\n\t\n\t//Get current ledger\n\tremote.request_ledger('closed', handleLedger);\n\n\tif (firstTime) {\n\t\tif (transaction_id && transaction_id!=\"\") {\n\t\t\tnodeMap = {};\n\t\t\tdegreeMap = {};\n\t\t\tnodes = [];\n      $('#focus').val(transaction_id);\n\t\t\tremote.request_tx(transaction_id, handleIndividualTransaction);\n\t\t} else {\n\t\t\tlastFocalNode = REFERENCE_NODE;\n\t\t\texpandNode(focalNode);\n\t\t\taddNodes(0);\n\t\t\tserverGetInfo(focalNode);\n\t\t}\n\t}\n\tfirstTime = false;\n});\n\nvar pendingRequests = {};\n\nvar requestRepetitionInterval = setInterval(function(){\n\tvar now = new Date().getTime();\n\tvar idsToDelete = [];\n\tvar entriesToAdd = {};\n\tfor (var id in pendingRequests) {\n\t\tif (pendingRequests.hasOwnProperty(id)) {\n\t\t\tvar req = pendingRequests[id];\n\t\t\tif (req.timestamp + REQUEST_REPETITION_INTERVAL <= now) {\n\t\t\t\tconsole.log(\"Repeating request\");\n\t\t\t\tvar newID = req.func();\n\t\t\t\tentriesToAdd[newID] = {func: req.func, timestamp:now};\n\t\t\t\tidsToDelete.push(id);\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i=0; i<idsToDelete.length; i++) {\n\t\tdelete pendingRequests[idsToDelete[i]];\n\t}\n\tfor (var newID in entriesToAdd) {\n\t\tif (entriesToAdd.hasOwnProperty(newID)) {\n\t\t\tpendingRequests[newID] = entriesToAdd[newID];\n\t\t}\n\t}\n}, REQUEST_REPETITION_INTERVAL);\n\n\n\n//Repeatable methods for fetching from server\nfunction serverGetLines(address) {\n\tif ($.isEmptyObject(nodes[nodeMap[address]].trustLines)) {\n\t\t//Get trust lines for address         ?  ??current?\n\t\thandleLines(address)\n\t\t/*\n\t\tvar rral = (function() {return function() {\n\t\t\tvar x = remote.request_account_lines(address, 0, 0, handleLines);\n\n\t\t\t//THIS\n\t\t\treturn x.message.id;\n\t\t}})();\n\t\t\n\t\t*/\n\t\t/*\n\t\tvar reqID = rral();\n\t\tpendingRequests[reqID] = {\n\t\t\tfunc:rral,\n\t\t\ttimestamp:(new Date().getTime())\n\t\t}\n\t\t*/\n\t\t\n\t} else {\n\t\taddConnections(address, nodes[nodeMap[address]].trustLines);\n\t}\n}\n\nfunction serverGetInfo(address) {\n\t//console.log(\"serverGetInfo\", address);\n\tif (nodes[nodeMap[address]] && nodes[nodeMap[address]].account.index) {\n\t\t// Don't do anything if we already have information about this account.\n\t\t// TODO: Why does this never happen?\n\t} else {\n\t\t//Get account info for address\n\t\tvar rrai = (function() {return function() {\n\t\t\tvar x = remote.request_account_info(address, handleAccountData);\n\t\t\treturn x.message.id;\n\t\t}})();\n\t\tvar reqID = rrai();\n\t\tpendingRequests[reqID] = {\n\t\t\tfunc:rrai,\n\t\t\ttimestamp:(new Date().getTime())\n\t\t};\n\t}\n}\n\nvar TRANSACTION_PAGE_LENGTH = 13;\n\nfunction getNextTransactionPage() {\n\t//request transactions for the current account, with offset = nodes[nodeMap[address]].transactions.length\n\tvar rrat = (function() {return function(){\n\t\tvar x = remote.request_account_tx({\n\t\t\taccount: focalNode,\n\t\t\tlimit: TRANSACTION_PAGE_LENGTH,\n\t\t\tledger_index_min: -1,\n\t\t\tledger_index_max: -1,\n\t\t\tforward: false,\n\t\t\tmarker: nodes[nodeMap[focalNode]].transactionMarker\n\t\t}, handleAccountTransactions);\n\t\treturn x.message.id;\n\t}})();\n\tvar reqID = rrat();\n\tpendingRequests[reqID] = {\n\t\tfunc:rrat,\n\t\ttimestamp:(new Date().getTime())\n\t};\n\t//when the answer comes back, see if it's new information.\n\t//if so, update WITH THE NEW INFO ONLY (i.e., don't clear the whole table, only do\n\t//$(\"#transactionThrobber\").remove();\n\t//and add the new stuff.\n}\n\n\n//Handlers\n\nfunction handleLines(address) {\n\n/*\n\tdelete pendingRequests[this.message.id];\n\tif (err && err.remote && (err.remote.error === \"actNotFound\" || err.remote.error === \"actMalformed\") ) {\n\t\t$(\"#loading\").text(\"Account not found!\").css(\"color\",\"#a00\");\n\t} else {\n\t\t*/\n  \t/*if () {\n\t\t\t//serverGetLines(address);\n      addConnections(obj.account, obj.lines);\n\t\t}*/\n    \n    //var shouldExpand = (mode==\"transaction\") || obj.lines.length<MAX_NUTL || confirm('This node has '+obj.lines.length+' unseen trust lines. Expanding it may slow down your browser. Are you sure?');\n    //addConnections(obj.account, obj.lines, !shouldExpand);\n    \n// basicincome.co\n$MongoDB.getpathways(address, filter_connections)\n\n\nfunction filter_connections(data){\n\tvar pathway = []\n\n \tfor(var i =0; i<data.length; i++){\n \t\tpathway.push({\"account\": data[i].account, \"balance\": data[i].total_pathway, \"currency\": data[i].currency, \"limit\":\"0\",\"limit_peer\":\"0.25\",\"quality_in\":0,\"quality_out\":0, \"taxRate\": data[i].taxRate})\n\n \t}\n \tconsole.log(\"this\"+address,pathway)\n    addConnections(address, pathway);\n\n}\n\n    //if (\n\t\t//addConnections(obj.account, obj.lines);\n\t}\n\n\nfunction handleTransaction(obj) {\n    var tx  = obj.transaction;\n    tx.meta = obj.meta;\n\t$(\"#transactionFeedTable\").prepend(renderTransaction(tx));\n\tif (obj.transaction.TransactionType == \"Payment\") {\n\t\tanimateTransaction(tx);\n\t}\n}\n\nfunction handleLedger(err, obj) {\n\tcurrentLedger = obj.ledger;\n\t$(\"#ledgernumber\").text(commas(parseInt(currentLedger.ledger_index)));\n\t$(\"#totalripples\").text(commas(parseInt(currentLedger.total_coins)/1000000));\n}\n\nfunction handleAccountData(err, obj) {\n\tdelete pendingRequests[this.message.id];\n\tif (err && err.remote && (err.remote.error === \"actNotFound\" || err.remote.error === \"actMalformed\" )) {\n\t\t$(\"#loading\").text(\"Account not found!\").css(\"color\",\"#a00\");\n\t} else {\n\t\tif ($.isEmptyObject(obj.account_data)) {\n\t\t\talert(\"This address is not valid!\");\n\t\t\tconsole.log(obj);\n\t\t\trefocus(lastFocalNode,true);\n\t\t} else {\n\t\t\tvar n = nodes[nodeMap[obj.account_data.Account]];\n\t\t\tn.account = obj.account_data; //XXXX Uncaught TypeError: Cannot set property 'account' of undefined\n\t\t\tif (currentCurrency == \"XRP\") { // Change the size of the circles, and recalculate the arrows.\n\t\t\t\tupdated = svg.select(\"g#nodeGroup\").select(\"circle#_\"+obj.account_data.Account);\n\t\t\t\tupdated.attr(\"r\", nodeRadius(n));\n\t\t\t\tsvg.select(\"g#haloGroup\").select(\"circle#halo_\"+obj.account_data.Account).attr(\"r\", HALO_MARGIN+nodeRadius(n));;\n\t\t\t}\n\t\t\tif (obj.account_data.Account == focalNode) {\n\t\t\t\t//Update the XRP listing on the table below. (But don't rewrite the whole table)\n\t\t\t\t$(\"#xrpBalance\").text(commas(n.account.Balance/1000000));\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction handleAccountTransactions(err, obj) {\n\tdelete pendingRequests[this.message.id];\n\tvar n = nodes[nodeMap[obj.account]];\n\tvar noMoreTransactions = true;\n\tif (n.transactions) { //XXXX Uncaught TypeError: Cannot read property 'transactions' of undefined \n\t\t//You don't want to add the same set of transactions more than once.\n\t\t//So, only add the transactions if one of the following is true:\n\t\t//1. We have no marker stored locally.\n\t\t//2. The message had no marker, and we are not yet finished with the list.\n\t\t//3. The message did have a marker, but its ledger number is less than that of the locally stored marker.\n\t\tif (!n.marker || (!obj.marker && !n.transactionsFinished) || (obj.marker && n.marker.ledger>obj.marker.ledger)) {\n\t\t\tn.transactions.push.apply(n.transactions, obj.transactions);\n\t\t}\n\t} else {\n\t\tn.transactions = obj.transactions;\n\t}\n\t\n\tif (obj.marker) {\n\t\tn.transactionMarker = obj.marker;\n\t} else {\n\t\tn.transactionsFinished = true;\n\t}\n\tif (obj.account == focalNode) {\n\t\t//updateTransactions(focalNode, true); //appending=true\n\t}\n}\n\nfunction handleIndividualTransaction(err, obj) {\n\tdelete pendingRequests[this.message.id];\n\ttxx = obj;\n\tchangeMode(\"transaction\", txx);\n}\n\n\n\n\n\n\n// MODE CHANGING\n\nvar mode = \"individual\";\nvar senderAddress;\n\nfunction changeMode(newMode, data) {\n\tif (mode != newMode) {\n\t\tif (mode==\"individual\") {\n\t\t\texitIndividualMode();\n\t\t} else if (mode==\"transaction\") {\n\t\t\texitTransactionMode();\n\t\t} else if (mode==\"feed\") {\n\t\t\texitFeedMode();\n\t\t}\n\t\tif (newMode==\"individual\") {\n\t\t\tenterIndividualMode(data);\n\t\t} else if (newMode==\"transaction\") {\n\t\t\tenterTransactionMode(data);\n\t\t} else if (newMode==\"feed\") {\n\t\t\tenterFeedMode();\n\t\t}\n\t\tmode = newMode;\n\t}\n}\n\n$scope.changeMode = function(newMode, data) {\n\tif (mode != newMode) {\n\t\tif (mode==\"individual\") {\n\t\t\texitIndividualMode();\n\t\t} else if (mode==\"transaction\") {\n\t\t\texitTransactionMode();\n\t\t} else if (mode==\"feed\") {\n\t\t\texitFeedMode();\n\t\t}\n\t\tif (newMode==\"individual\") {\n\t\t\tenterIndividualMode(data);\n\t\t} else if (newMode==\"transaction\") {\n\t\t\tenterTransactionMode(data);\n\t\t} else if (newMode==\"feed\") {\n\t\t\tenterFeedMode();\n\t\t}\n\t\tmode = newMode;\n\t}\n}\n\nfunction enterIndividualMode(data) {\n\tif (mode != \"individual\") {\n\t\t$(\"#leftHeading\").text(\"Balances\");\n\t\t//$(\"#rightHeading\").text(\"History\");\n\t\t$(\"#rippleName\").css(\"visibility\",\"visible\");\n\t\t$(\"#focalAddress\").css(\"visibility\",\"visible\");\n\t\t$(\"#balanceTable\").css(\"visibility\",\"visible\");\n\t\t$(\"#transactionTable\").css(\"visibility\",\"visible\");\n\t\t$(\"#transactionInformationContainer\").css(\"display\",\"none\"); //This is here because it is used by both feed and transaction modes.\n\t\t$(\"#feedTab\").addClass(\"unselectedTab\").removeClass(\"selectedTab\").css(\"visibility\",\"visible\");\n\t\t$(\"#individualTab\").removeClass(\"unselectedTab\").addClass(\"selectedTab\").css(\"visibility\",\"visible\");\n\t\tif (data) {\n\t\t\texpandNode(data);\n\t\t\tsenderAddress = false;\n\t\t}\n\t\tmode = \"individual\";\n\t}\n}\nfunction exitIndividualMode() {\n\tif (mode == \"individual\") {\n\t\t$(\"#rightHeading\").text(\"\");\n\t\t$(\"#rippleName\").css(\"visibility\",\"hidden\");\n\t\t$(\"#focalAddress\").css(\"visibility\",\"hidden\");\n\t\t$(\"#balanceTable\").css(\"visibility\",\"hidden\");\n\t\t$(\"#transactionTable\").css(\"visibility\",\"hidden\");\n\t\t$(\"#transactionInformationContainer\").css(\"display\",\"inherit\");\n\t}\n}\n\nfunction enterFeedMode() {\n\tif (mode != \"feed\") {\n\t\t$(\"#feedTab\").removeClass(\"unselectedTab\").addClass(\"selectedTab\");\n\t\t$(\"#individualTab\").addClass(\"unselectedTab\").removeClass(\"selectedTab\");\n\t\t$(\"#transactionFeed\").css(\"display\",\"inherit\");\n\t\t$(\"#leftHeading\").text(\"Live transaction feed\");\n\t\tmode = \"feed\";\n\t}\n}\nfunction exitFeedMode() {\n\tif (mode == \"feed\") {\n\t\t$(\"#transactionFeed\").css(\"display\",\"none\");\n\t}\n}\n\nfunction enterTransactionMode(tx) {\n\tif (mode != \"transaction\") {\n\t\teraseGraph();\n\t\ttxx = tx;\n\t\t$(\"#transactionInformation\").html(txDescription(tx));\n\t\tvar currency;\n\t\tif (tx.Amount.currency) {\n\t\t\tcurrency = tx.Amount.currency;\n\t\t} else {\n\t\t\tcurrency = \"XRP\";\n\t\t}\n\t\tvar option = $(\"select#currency\").find(\"option[value=\"+currency+\"]\");\n\t\tif (option.html()) {\n\t\t\t$(\"select#currency\").selectbox(\"change\", currency, option.html());\n\t\t} else {\n\t\t\t$(\"select#currency\").selectbox(\"change\", \"___\", \"SSGSGS\");\n\t\t\t$(\"#otherCurrency\").attr(\"value\",currency);\n\t\t\t$('#otherCurrency').css('font-style','inherit').css('color','inherit');\n\t\t\tchangeCurrency(\"___\");\n\t\t}\n\t\tsenderAddress = tx.Account;\n\t\t\n\t\twalkPaths(tx, true);\n\n\t\tsetTimeout(function(){animateTransaction(tx);}, 2000);\n\t\t$(\"#leftHeading\").html(\"Transaction information <input type='button' style='position:absolute; top:56px; left:200px;' onclick='animateTransaction(txx);' value='Animate'/>\");\n\t\t$(\"#feedTab\").addClass(\"unselectedTab\").removeClass(\"selectedTab\");\n\t\t$(\"#individualTab\").addClass(\"unselectedTab\").removeClass(\"selectedTab\");\n\t\t$(\"#transactionInformation\").css(\"display\",\"inherit\");\n\t\tmode = \"transaction\";\n\t}\n}\nfunction exitTransactionMode() {\n\tif (mode == \"transaction\") {\n\t\t$(\"#transactionInformation\").css(\"display\",\"none\");\n\t}\n}\n\n\nfunction walkPaths(tx, clearing) {\n\tvar anyNewNodes = false;\n\tvar numberOfExistingNodes = nodes.length-1;\n\tif (\"undefined\" == typeof nodeMap[tx.Account]) {\n\t\tnodes.push({x:w*Math.random(), y:hh*Math.random(), account:{Account:tx.Account, Balance:0}, trustLines:[], balances:{} }); //\n\t\tnodeMap[tx.Account] = nodes.length-1;\n\t\tdegreeMap[tx.Account] = clearing ? 0 : 1;\n\t\tanyNewNodes = true;\n\t}\n\tif (tx.Paths) {\n\t\tfor (var i=0; i<tx.Paths.length; i++) {\n\t\t\tfor (var j=0; j<tx.Paths[i].length; j++) {\n\t\t\t\tvar address = tx.Paths[i][j].account;\n\t\t\t\tif (\"undefined\" == typeof nodeMap[address]) {\n\t\t\t\t\tif (address) {\n\t\t\t\t\t\tnodes.push({x:w*Math.random(), y:hh*Math.random(), account:{Account:address, Balance:0}, trustLines:[], balances:{} });\n\t\t\t\t\t\tnodeMap[address] = nodes.length-1;\n\t\t\t\t\t\tdegreeMap[address] = 1;\n\t\t\t\t\t\tconsole.log(\"Added node\");\n\t\t\t\t\t\tanyNewNodes = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (\"undefined\" == typeof nodeMap[tx.Destination]) {\n\t\tnodes.push({x:w*Math.random(), y:hh*Math.random(), account:{Account:tx.Destination, Balance:0}, trustLines:[], balances:{} });\n\t\tnodeMap[tx.Destination] = nodes.length-1;\n\t\tdegreeMap[tx.Destination] = clearing ? 0 : 1;\n\t\tanyNewNodes = true;\n\t}\n\tif (anyNewNodes) {\n\t\taddNodes(1);\n\t}\n\t\n\tif (clearing) {\t//Do this if we just cleared the graph and are displaying the transaction.\n\t\tfor (var i=0; i<nodes.length; i++) {\n\t\t\tserverGetInfo(nodes[i].account.Account);\n\t\t\tserverGetLines(nodes[i].account.Account);\n\t\t}\n\t} else if (anyNewNodes) { //Do this if we're displaying in place:\n\t\t//Note: This will NOT display new connections between already existing nodes, even if the transaction uses them.\n\t\tdisplayingTransactionInPlace = true;\n\t\tfor (var i=numberOfExistingNodes; i<nodes.length; i++) {\n\t\t\tserverGetInfo(nodes[i].account.Account);\n\t\t\tserverGetLines(nodes[i].account.Account);\n\t\t}\n\t}\n}\n\nfunction eraseGraph() {\n\tzoomLevel = 1;\n\ttranslationX = 0;\n\ttranslationY = 0;\n\tpanAndZoom();\n\t$(\"#zoomInButton\").attr(\"disabled\",\"disabled\");\n\n\tsvg.select(\"g#nodeGroup\").selectAll(\"circle.node\").data([]).exit().remove();\n\tsvg.select(\"g#linkGroup\").selectAll(\"line\")       .data([]).exit().remove();\n\tsvg.select(\"g#haloGroup\").selectAll(\"circle.halo\").data([]).exit().remove();\n\tsvg.select(\"g#arrowheadGroup\").selectAll(\"path.arrowhead\").data([]).exit().remove();\n\t\n\tnodes = [];\n\tle_links = [];\n\tnodeMap = {};\n\texpandedNodes = {};\n\tprovisionallyExpandedNodes = {};\n\tanimatorLinks = [];\n\t$(\"#loading\").css(\"display\",\"block\").css(\"color\",\"#aaa\");;\n\t$(\"#loading\").html('<img src=\"throbber4.gif\" style=\"vertical-align: middle;\" /> Loading...');\n}\n\n\n// DATA-TO-HTML FUNCTIONS\nfunction renderTransaction(tx) {\n\tvar transactionType;\n\tvar from = tx.Account;\n\tvar to = null;\n\tvar amount = null;\n\tvar currency = null;\n\tvar secondAmount = null;\n\tvar secondCurrency = null;\n\tif (tx.TransactionType == \"Payment\") {\n\t\tamount = tx.meta.DeliveredAmount || tx.Amount;\n\t\ttransactionType = \"send\";\n\t\tto = tx.Destination;\n\t} else if (tx.TransactionType == \"TrustSet\") {\n\t\tamount = tx.LimitAmount;\n\t\ttransactionType = \"trustout\";\n\t\tto = tx.LimitAmount.issuer;\n\t} else if (tx.TransactionType == \"OfferCreate\") {\n\t\ttransactionType = \"offerout\";\n\t\tamount = tx.TakerGets;\n\t\tsecondAmount = tx.TakerPays;\n\t} else if (tx.TransactionType == \"OfferCancel\") {\n\t\ttransactionType = \"canceloffer\";\n\t} else {return;}\n\tif (amount) {\n\t\tif (amount.currency) {\n\t\t\tcurrency = amount.currency;\n\t\t\tamount = amount.value;\n\t\t} else {\n\t\t\tcurrency = \"XRP\";\n\t\t\tamount = amount/1000000;\n\t\t}\n\t}\n\tif (secondAmount) {\n\t\tif (secondAmount.currency) {\n\t\t\tsecondCurrency = secondAmount.currency;\n\t\t\tsecondAmount = secondAmount.value;\n\t\t} else {\n\t\t\tsecondCurrency = \"XRP\";\n\t\t\tsecondAmount = secondAmount/1000000;\n\t\t}\n\t}\n\ttransactionMap[tx.hash] = tx;\n\treturn ('<tr>'+\n\t\t'<td style=\"width:80px;\">'+absoluteTime(tx.date)+'</td>'+\n\t\t'<td style=\"width:1px;\">'+clickableAccountSpan(from)+'</td>'+\n\t\t'<td style=\"width:40px;\"><div '+(transactionType=='send'?'oncontextmenu=\"animateInPlaceWithHash(\\''+tx.hash+'\\');return false;\" onclick=\"showTransactionWithHash(\\''+tx.hash+'\\')\"':'')+' class=\"'+transactionType+' icon\" title=\"'+txAltText[transactionType]+'\">&nbsp;</div></td>'+\n\t\t( to||secondAmount ?\n\t\t\t'<td style=\"width:1px;\"><span class=\"bold amount small\">'+commas(amount)+'</span>&nbsp;<span class=\"light small darkgray\">'+currency+'</span></td>'+\n\t\t\t'<td style=\"text-align:center; width:20px;\"><i class=\"light small darkgray\">'+\n\t\t\t( to ?\n\t\t\t\t'to</i></td>'+\n\t\t\t\t'<td style=\"width:1px;\">'+clickableAccountSpan(to)+'</td>'\n\t\t\t\t:\n\t\t\t\t'for</i></td>'+\n\t\t\t\t'<td style=\"width:1px;\"><span class=\"bold amount small\">'+commas(secondAmount)+'</span>&nbsp;<span class=\"light small darkgray\">'+secondCurrency+'</span></td>'\n\t\t\t)\n\t\t\t:\n\t\t\t'<td colspan=3></td>'\n\t\t)+\n\t\t'</tr>');\n}\n\nfunction clickableAccountSpan(address) {\n\tvar o = \"<span class='light address' style='cursor:pointer;' \"+\n\t\t\"onmouseover='lightenAddress(\\\"\"+address+\"\\\");' \"+\n\t\t\"onmouseout='darkenAddress(\\\"\"+address+\"\\\");' \"+\n\t\t\"onclick='expandNode(\\\"\"+address+\"\\\");'>\"+\n\t\taddress+\"</span>\";\n\treturn o;\n}\n\nfunction txDescription(result) {\n\tconsole.log(\"TX INFO:\",result);\n  var xrpExpense;\n  if (result.meta) {\n    for (var i=0; i<result.meta.AffectedNodes.length; i++) {\n      var an = result.meta.AffectedNodes[i];\n      if (an.ModifiedNode && an.ModifiedNode.LedgerEntryType===\"AccountRoot\" && an.ModifiedNode.FinalFields.Account===result.Account) {\n        xrpExpense = {before:an.ModifiedNode.PreviousFields.Balance/1000000 , after:an.ModifiedNode.FinalFields.Balance/1000000};\n        break;\n      }\n    }\n  }\n    var amount = result.meta.DeliveredAmount || result.Amount;\n\tvar output = (amount?\"<b>Amount:</b> <span class='amount'>\"+\n\t\t(amount.currency ? commas(amount.value)+\" \"+amount.currency : commas(amount/1000000)+\" XRP\")+\"</span><br/>\"+\n\t\t(amount.issuer ? \"<b>Issuer:</b> \"+clickableAccountSpan(amount.issuer)+\"<br/>\" : \"\"):\"\")+\n\t\t\"<b>Path:</b><ul>\"+\n\t\t(function(){\n\t\t\tvar output = \"\";\n\t\t\tif (result.Paths) {\n\t\t\t\tfor (var i=0; i<result.Paths.length; i++) {\n\t\t\t\t\tvar listItem = \"<li>\"+clickableAccountSpan(result.Account) + \" &rarr; \";\n\t\t\t\t\tfor (var j=0; j<result.Paths[i].length; j++) {\n\t\t\t\t\t\tif (result.Paths[i][j].account) {\n\t\t\t\t\t\t\tlistItem += clickableAccountSpan(result.Paths[i][j].account) + \" &rarr; \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlistItem += (clickableAccountSpan(result.Destination) + \"</li>\");\n\t\t\t\t\toutput += listItem;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput += (\"<li>\"+clickableAccountSpan(result.Account)+ \" &rarr; \"+clickableAccountSpan(result.Destination)+\"</li>\");\n\t\t\t}\n\t\t\treturn output;\n\t\t})()+\n\t\t\"</ul>\"+\n    (result.meta ? \"<b>Result:</b> \"+(result.meta.TransactionResult==\"tesSUCCESS\"?\"<span>\":\"<span style='color:#900;'>\")+result.meta.TransactionResult+\"</span><br/>\" : \"\")+\n\t\t(xrpExpense||xrpExpense===0 ? \"<b>XRP change:</b> \"+commas(xrpExpense.before) + \" XRP &rarr; \"+commas(xrpExpense.after)+\" XRP (\"+(xrpExpense.after>=xrpExpense.before?\"+\":\"&ndash;\")+commas(Math.round(1000000*Math.abs(xrpExpense.before-xrpExpense.after))/1000000)+\" XRP)<br/>\" : \"\")+\n    (result.date ? \"<b>Date:</b> \"+absoluteDateOnly(result.date)+\" \"+absoluteTimeOnly(result.date)+\"<br/>\" : \"\")+\n    (result.InvoiceID ? \"<b>Invoice ID:</b> <tt>\"+result.InvoiceID+\"</tt><br/>\" : \"\")+\n    (result.DestinationTag ? \"<b>Destination tag:</b> \"+result.DestinationTag+\"<br/>\" : \"\")+\n\t\t\"<b>Hash:</b> <tt>\"+result.hash+\"</tt><br/>\"+\n    (result.inLedger ? \"<b>Ledger:</b> \"+result.inLedger+\"<br/>\" : \"\")+\n\t\t\"<b>Signing key:</b> <tt>\"+result.SigningPubKey+\n\t\t\"</tt><br/><b>Signature:</b><br/><div class='bigString' style='width:\"+result.TxnSignature.length*4+\"px;'>\"+result.TxnSignature+\"</div>\";\n\t\t\n\treturn output;\n}\n\n\nfunction currentCurrencyBalance(accountNode) {\n\tvar output;\n\tif (currentCurrency == \"XRP\") {\n\t\toutput = accountNode.account.Balance;\n\t} else {\n\t\toutput = accountNode.balances[currentCurrency];\n\t\tif (!output) { output = 0; }\n\t}\n\treturn output;\n}\n\nvar displayingTransactionInPlace = false;\n\nfunction addConnections(origin, trustLines) {\n\n\tconsole.log(\"this\"+trustLines)\n\tvar transactionMode = (mode==\"transaction\") || displayingTransactionInPlace;\n\t$(\"#loading\").css(\"display\",\"none\");\n\t\n\t//Receive an array of the format:\n\t//[{\"account\":\"rnziParaNb8nsU4aruQdwYE3j5jUcqjzFm\",\"balance\":\"0\",\"currency\":\"BTC\",\"limit\":\"0\",\"limit_peer\":\"0.25\",\"quality_in\":0,\"quality_out\":0},\n\t//{\"account\":\"rU5KBPzSyPycRVW1HdgCKjYpU6W9PKQdE8\",\"balance\":\"0\",\"currency\":\"BTC\",\"limit\":\"0\",\"limit_peer\":\"10\",\"quality_in\":0,\"quality_out\":0}]\n\tnodes[nodeMap[origin]].trustLines = trustLines; //XXXX Uncaught TypeError: Cannot set property 'trustLines' of undefined \n\tnodes[nodeMap[origin]].balances = getBalances(origin);\n\n\tif (origin == focalNode) {\n\t\tupdateInformation(origin);\n\t}\n\t\n\tif (currentCurrency != \"XRP\") { // Change the size of the circle, if we needed to wait until now to figure out its balance (i.e. we're looking at a currency other than XRP.)\n\t\tsvg.select(\"g#nodeGroup\")\n\t\t\t.select(\"circle#_\"+origin)\n\t\t\t.attr(\"r\", nodeRadius(nodes[nodeMap[origin]]) );\n\t\tsvg.select(\"g#haloGroup\")\n\t\t\t.select(\"circle#halo_\"+origin)\n\t\t\t.attr(\"r\", HALO_MARGIN+nodeRadius(nodes[nodeMap[origin]]) );\n\t}\n\n\tif ((degreeMap[origin] < RECURSION_DEPTH || ( degreeMap[origin] == RECURSION_DEPTH) && transactionMode) && (transactionMode || trustLines.length<MAX_NUTL || confirm('This node has '+trustLines.length+' unseen trust lines. Expanding it may slow down your browser. Are you sure?')) ) {\n\t\tif (!transactionMode) {\n\t\t\texpandedNodes[origin] = true;\n\t\t} else {\n\t\t\tprovisionallyExpandedNodes[origin] = true;\n\t\t}\n\t\tvar newNodes = [];\n\t\tvar newLinks = [];\n\t\tfor (var i=0; i<trustLines.length; i++) {\n\t\t\tvar linkWasToExisting = false;\n\t\t\t// add trustLines[i][\"account\"] to the list of nodes, if it's not on it already.\n\t\t\t// add a link from the current node to trustLines[i][\"account\"], if it's not there already.\n\t\t\ttrustLine = trustLines[i];\n\t\t\taccount = trustLine[\"account\"];\n\t\t\t// Fetch the node corresponding to the counterparty of this trust line,\n\t\t\t// or if it's not on the list yet, create one and add it to the list.\n\t\t\tif (\"undefined\" == typeof nodeMap[account]) {\n\t\t\t\tif (!transactionMode && (parseFloat(trustLine.limit) != 0.0 ||  parseFloat(trustLine.limit_peer) != 0.0) ) {\n\t\t\t\t\tnodeMap[account]=nodes.length;\n\t\t\t\t\tdegreeMap[account] = degreeMap[origin] + 1;\n\t\t\t\t\tvar angle = Math.random() * 6.283185307179586;\n\t\t\t\t\tvar radius= Math.random() * 100;\n\t\t\t\t\tvar node = {\n\t\t\t\t\t\tx:nodes[nodeMap[origin]].x+Math.cos(angle)*radius,\n\t\t\t\t\t\ty:nodes[nodeMap[origin]].y+Math.sin(angle)*radius,\n\t\t\t\t\t\taccount: {\n\t\t\t\t\t\t\tAccount:account,\n\t\t\t\t\t\t\tBalance:\"0\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrustLines: [],\n\t\t\t\t\t\tbalances: {}\n\t\t\t\t\t}\n\t\t\t\t\tnewNodes.push(node);\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t//Only add the node if the trust line is non-zero.\n\t\t\t\t\tdegreeMap[account] = degreeMap[origin] + 1; \n\t\t\t\t\tserverGetInfo(account); //If this node is not on the list yet, we're going to need to get the info and trustLines for it.\n\t\t\t\t\tserverGetLines(account);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar node = nodes[nodeMap[account]];\n\t\t\t\tlinkWasToExisting = true;\n\t\t\t}\n\t\t\t// Now, create links to all of the counterparties that have not been expanded (ie., had their links displayed.). If we're in transaction mode, only add links to existing nodes.\n\t\t\tif ( (!transactionMode && !expandedNodes[account]) || (transactionMode && linkWasToExisting && !provisionallyExpandedNodes[account]) )  {\n\t\t\t\tvar link={};\n\t\t\t\tfunction goon(link) {\n\t\t\t\t\tif (parseFloat(trustLine.limit) != 0.0 && parseFloat(trustLine.limit_peer) != 0.0) {\n\t\t\t\t\t\tlink.strength = 0.5;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlink.strength = 1;\n\t\t\t\t\t}\n\t\t\t\t\tlink.currency=trustLines[i].currency;\n\t\t\t\t\tle_links.push(link);\n\t\t\t\t}\n\t\t\t\tif (parseFloat(trustLine.limit) != 0.0) {\n\t\t\t\t\tlink.source=nodes[nodeMap[ origin ]];\n\t\t\t\t\tlink.target=node;\n\t\t\t\t\tlink.value= parseFloat(trustLine.limit);\n\t\t\t\t\tgoon(link);\n\t\t\t\t}\n\t\t\t\tif (parseFloat(trustLine.limit_peer) != 0.0) {\n\t\t\t\t\tvar link={};\n\t\t\t\t\tlink.target=nodes[nodeMap[ origin ]];\n\t\t\t\t\tlink.source=node;\n\t\t\t\t\tlink.value= parseFloat(trustLine.limit_peer);\n\t\t\t\t\tgoon(link);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (linkWasToExisting) {\n\t\t\t//If we're adding a trust line to an already-existing node, check that node again to see if we should put a halo on it.\n\t\t\t\tsvg.select(\"g#haloGroup\").select(\"circle#halo_\"+account)\n\t\t\t\t\t.style(\"stroke\", (numberOfUnseenTrustLines(node)>0)?\"#aaa\":\"none\" );\n\t\t\t}\n\t\t}\n\t}\n\t\n\treassignColors(origin);\n\taddNodes(degreeMap[origin]+1);\n\t\n\n\t//should we add a halo to origin?\n\tsvg.select(\"g#haloGroup\").select(\"circle#halo_\"+origin)\n\t\t.style(\"stroke\", (numberOfUnseenTrustLines(nodes[nodeMap[origin]])>0)?\"#aaa\":\"none\" );\n\tdisplayingTransactionInPlace = false; //really?\n}\n\n\n\nvar svg = d3.select(\"#visualization\")\n\t.append(\"svg:svg\")\n\t.attr(\"width\", \"100%\")\n\t.attr(\"height\", h).attr(\"pointer-events\", \"all\")\n\t.style(\"background-color\", \"#fff\").on(\"click\",function(){\n\t\tif($('.sbOptions').css(\"display\") == \"block\") {\n\t\t\t$('.sbToggle').trigger('click');\n\t\t}\n\t\tif($('#otherCurrency').css(\"display\") == \"block\") {\n\t\t\t$('#otherCurrency').trigger('blur');\n\t\t}\n\t})\n\t.style(\"float\",\"left\")//.style({\"border-left\":\"1px solid #c8c8c8\", \"border-right\":\"1px solid #c8c8c8\", \"border-top\":\"1px solid #c8c8c8\"})\n\t.style(\"margin-right\",\"10\").call(d3.behavior.drag().on(\"drag\", redraw));\n\nvar zoomLevel = 1;\nvar translationX = 0;\nvar translationY = 0;\nvar panOffset = [0,0];\nfunction redraw() {\n  translationX += d3.event.dx;\n  translationY += d3.event.dy;\n  panAndZoom();\n}\t\n\n\n$scope.zoomOut = function(){\n\tif (zoomLevel >= 1) {\n\t\t$(\"#zoomInButton\").removeAttr(\"disabled\");\n\t}\n\ttranslationX += (w/8 * zoomLevel);\n\ttranslationY += (hh/8 * zoomLevel);\n\tpanOffset[0] -= (w/8 * zoomLevel);\n\tpanOffset[1] -= (hh/8 * zoomLevel);\n\tzoomLevel *= 0.75;\n\tpanAndZoom();\n}\n\n$scope.zoomIn=function() {\n\tzoomLevel /= 0.75;\n\tif (zoomLevel >= 1) {\n\t\tzoomLevel = 1;\n\t\t$(\"#zoomInButton\").attr(\"disabled\",\"disabled\");\n\t}\n\ttranslationX -= (w/8 * zoomLevel);\n\ttranslationY -= (hh/8 * zoomLevel);\n\tpanOffset[0] += (w/8 * zoomLevel);\n\tpanOffset[1] += (hh/8 * zoomLevel);\n\tpanAndZoom();\n}\n\nfunction panAndZoom() {\n\tlinkGroup.attr     (\"transform\",\"translate(\" + [translationX,translationY] + \"),scale(\"+zoomLevel+\")\");\n\tnodeGroup.attr     (\"transform\",\"translate(\" + [translationX,translationY] + \"),scale(\"+zoomLevel+\")\");\n\thaloGroup.attr     (\"transform\",\"translate(\" + [translationX,translationY] + \"),scale(\"+zoomLevel+\")\");\n\tarrowheadGroup.attr(\"transform\",\"translate(\" + [translationX,translationY] + \"),scale(\"+zoomLevel+\")\");\n}\n\nvar defs = svg.append(\"defs\");\n\nfunction defineRadialGradient(name, innerColor, outerColor) {\n\tvar radGrad = defs.append(\"radialGradient\")\n\t\t.attr(\"id\", name)\n\t\t.attr(\"fx\", \"50%\")\n\t\t.attr(\"fy\", \"50%\")\n\t\t.attr(\"r\", \"100%\")\n\t\t.attr(\"spreadMethod\", \"pad\");\n\tradGrad.append(\"stop\")\n\t\t.attr(\"offset\",\"0%\")\n\t\t.attr(\"stop-color\",innerColor)\n\t\t.attr(\"stop-opacity\",\"1\");\n\tradGrad.append(\"stop\")\n\t\t.attr(\"offset\",\"100%\")\n\t\t.attr(\"stop-color\",outerColor)\n\t\t.attr(\"stop-opacity\",\"1\");\n}\n\nfor (var cur in COLOR_TABLE) {\n\tvar shades\nif($scope.network_type !='Dividend Pathways'){\n\tconsole.log(\"s\")\n\tshades = COLOR_TABLE[\"SAF\"];\n\t}\n\telse shades = COLOR_TABLE[\"DIV\"];console.log(\"Dividendpathway\"+shades)\n\n\tfor (var i=0; i<shades.length; i++) {\n\t\tdefineRadialGradient(\"gradient\"+cur+i, shades[i][0], shades[i][1]);\n\t}\n}\n\nfunction change_color(){\nfor (var cur in COLOR_TABLE) {\n\tvar shades\nif($scope.network_type !='Dividend Pathways'){\n\tconsole.log(\"s\")\n\tshades = COLOR_TABLE[\"SAF\"];\n\t}\n\telse shades = COLOR_TABLE[\"DIV\"];console.log(\"Dividendpathway\"+shades)\n\n\tfor (var i=0; i<shades.length; i++) {\n\t\tdefineRadialGradient(\"gradient\"+cur+i, shades[i][0], shades[i][1]);\n\t}\n}\n\n\nif($scope.network_type !='Dividend Pathways'){$scope.$apply(function(){\n$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1] }\n})\n\nconsole.log(COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1])\n\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")\n\n}\nelse {$scope.$apply(function(){\n\t$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'DIV')][0][1] }})\n\t\n\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")\n}\n\n}\n\nfunction defineFilter(name, red, green, blue) {\n\tvar filter = defs.append(\"filter\").attr(\"id\",name).attr(\"x\",\"-200%\").attr(\"y\",\"-200%\").attr(\"width\",\"800%\").attr(\"height\",\"800%\");\n\tvar fct = filter.append(\"feComponentTransfer\").attr(\"in\",\"SourceAlpha\");\n\tfct.append(\"feFuncR\").attr(\"type\",\"discrete\").attr(\"tableValues\",red+\" 1\");\n\tfct.append(\"feFuncG\").attr(\"type\",\"discrete\").attr(\"tableValues\",green+\" 1\");\n\tfct.append(\"feFuncB\").attr(\"type\",\"discrete\").attr(\"tableValues\",blue+\" 1\");\n\tfilter.append(\"feGaussianBlur\").attr(\"stdDeviation\",\"20\");\n\tfilter.append(\"feOffset\").attr(\"dx\",\"0\").attr(\"dy\",\"0\").attr(\"result\",\"shadow\");\n\tfilter.append(\"feComposite\").attr(\"in\",\"SourceGraphic\").attr(\"in2\",\"shadow\").attr(\"operator\",\"over\");\n}\n\n\nfor (cur in HIGH_SATURATION_COLORS) {\n\tvar red = HEX_TO_PERCENT[HIGH_SATURATION_COLORS[cur].charAt(1)];\n\tvar green = HEX_TO_PERCENT[HIGH_SATURATION_COLORS[cur].charAt(2)];\n\tvar blue = HEX_TO_PERCENT[HIGH_SATURATION_COLORS[cur].charAt(3)];\n\tdefineFilter(\"shine\"+cur, red, green, blue);\n}\n\n\nvar haloGroup = svg.append(\"g\").attr(\"id\",\"haloGroup\");\nvar linkGroup = svg.append(\"g\").attr(\"id\",\"linkGroup\");\nvar arrowheadGroup = svg.append(\"g\").attr(\"id\",\"arrowheadGroup\");\nvar nodeGroup = svg.append(\"g\").attr(\"id\",\"nodeGroup\");\n\nfunction nodeRadius(accountNode) {\n\tvar bal = currentCurrencyBalance(accountNode);\n\tif (currentCurrency != \"XRP\") {\n\t\tbal = bal * 1000000000;\n\t} \n\treturn 14+Math.pow(Math.log(Math.abs(bal)+1),3) / 2000;\n\t//TESTING FUN STUFF\n\t/*var tl = accountNode.trustLines.length;\n\treturn 2+Math.pow(Math.log(1+tl),4)/25;*/\n}\n\nvar force = d3.layout.force()\n\t.size([(window.innerWidth > 0) ? window.innerWidth : screen.width, 710]) //w\n\t.linkDistance(80)\n\t.linkStrength(function(d) {\n\t\tif (currentCurrency == \"XRP\" || currentCurrency == d.currency) {\n\t\t\treturn d.strength * 0.25;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}).friction(0.5)\n\t.charge(-1500).nodes([]).links([]).start();\n\n\t\n\n\n\nfunction expandNode(address) {\n\tif (typeof(nodes[nodeMap[address]]) !== \"undefined\") {\n\t\tvar nutl = numberOfUnseenTrustLines(nodes[nodeMap[address]]);\n\t} else {\n\t\tvar nutl = 0;\n\t}\n\t\n\tchangingFocus = true;\n\twindow.location.hash = address;\n\tchangeMode(\"individual\");\n\tlastFocalNode = focalNode;\n\tfocalNode = address;\n\tif (\"undefined\" == typeof nodeMap[address]) {\n\t\trefocus(address, false);\n\t} else {\n\t\tif (!nodes[nodeMap[address]].transactions || nodes[nodeMap[address]].transactions.length === 0) {\n\t\t\tgetNextTransactionPage();\n\t\t}\n\t\tdegreeMap = {};\n\t\tdegreeMap[address] = 0;\n\t\treassignColors(address);\n\t\tcolorRogueNodes();\n\t\tif (expandedNodes[address]) {} else {\n\t\t\tif (nutl<MAX_NUTL || confirm('This node has '+nutl+' unseen trust lines. Expanding it may slow down your browser. Are you sure?')) {\n\t\t\t\tserverGetLines(address);\n\t\t\t} \n\t\t}\n\t\tupdateInformation(address);\n\t}\n\t\n}\n\n\n$scope.expandNode = function(address) {\n\tif (typeof(nodes[nodeMap[address]]) !== \"undefined\") {\n\t\tvar nutl = numberOfUnseenTrustLines(nodes[nodeMap[address]]);\n\t} else {\n\t\tvar nutl = 0;\n\t}\n\t\n\tchangingFocus = true;\n\twindow.location.hash = address;\n\tchangeMode(\"individual\");\n\tlastFocalNode = focalNode;\n\tfocalNode = address;\n\tif (\"undefined\" == typeof nodeMap[address]) {\n\t\trefocus(address, false);\n\t} else {\n\t\tif (!nodes[nodeMap[address]].transactions || nodes[nodeMap[address]].transactions.length === 0) {\n\t\t\tgetNextTransactionPage();\n\t\t}\n\t\tdegreeMap = {};\n\t\tdegreeMap[address] = 0;\n\t\treassignColors(address);\n\t\tcolorRogueNodes();\n\t\tif (expandedNodes[address]) {} else {\n\t\t\tif (nutl<MAX_NUTL || confirm('This node has '+nutl+' unseen trust lines. Expanding it may slow down your browser. Are you sure?')) {\n\t\t\t\tserverGetLines(address);\n\t\t\t} \n\t\t}\n\t\tupdateInformation(address);\n\t}\n\t\n}\n\n\nfunction borderColor(cur, colorDegree) {\n\tif (colorDegree == 0) {\n\t\treturn \"#fc0\"; //It actually doesn't use the border color for the focal node.\n\t} else {\n\t\treturn COLOR_TABLE[cur][colorDegree-1][1]; //Use the rim color of the next darkest degree.\n\t}\n}\n\n\nfunction findCur(d) {\n\tvar cur = currentCurrency;\n\tif(cur != \"XRP\") {\n\t\tif(!d.balances[cur]){cur=\"__Z\";}\n\t\telse if(d.balances[cur]<0){cur=\"__N\";}\n\t\telse if(!COLOR_TABLE.hasOwnProperty(cur)) {cur = \"___\";}\n\t}\n\treturn cur;\n}\n\nfunction lightenNodeFunction(colorDegree) {\n\treturn function(d) {\n\t\tvar cur = findCur(d);\n\t\td3.select(d3.event.target).style(\"fill\", \"url(#gradient\"+cur+(colorDegree+1)+\")\").style(\"stroke-width\", 2).style(\"stroke\", \"#fc0\" );\n\t}\n}\nfunction darkenNodeFunction(colorDegree) {\n\treturn function(d) {\n\t\tvar cur = findCur(d);\n\t\td3.select(d3.event.target).style(\"fill\", \"url(#gradient\"+cur+(colorDegree)+\")\").style(\"stroke-width\", (colorDegree==0?5:0.5)).style(\"stroke\", function(d){var cur = findCur(d); return borderColor(cur,colorDegree);} );\n\t}\n}\nfunction lightenAddress(address) {\n\tif (typeof degreeMap[address] != \"undefined\") {\n\t\tvar colorDegree = Math.min(degreeMap[address], 3);\n\t\tvar cur = findCur(force.nodes()[nodeMap[address]]);\n\t\tnodeGroup.select(\"#_\"+address).style(\"fill\", \"url(#gradient\"+cur+(colorDegree+1)+\")\").style(\"stroke-width\", 2).style(\"stroke\", \"#fc0\" );\n\t}\n}\n\n$scope.lightenAddress = function(address) {\n\tif (typeof degreeMap[address] != \"undefined\") {\n\t\tvar colorDegree = Math.min(degreeMap[address], 3);\n\t\tvar cur = findCur(force.nodes()[nodeMap[address]]);\n\t\tnodeGroup.select(\"#_\"+address).style(\"fill\", \"url(#gradient\"+cur+(colorDegree+1)+\")\").style(\"stroke-width\", 2).style(\"stroke\", \"#fc0\" );\n\t}\n}\n\n\nfunction darkenAddress(address) {\n\tif (typeof degreeMap[address] != \"undefined\") {\n\t\tvar colorDegree = Math.min(degreeMap[address], 3);\n\t\tvar cur = findCur(force.nodes()[nodeMap[address]]);\n\t\tnodeGroup.select(\"#_\"+address).style(\"fill\", \"url(#gradient\"+cur+(colorDegree)+\")\").style(\"stroke-width\", (colorDegree==0?5:0.5)).style(\"stroke\", function(d){var cur = findCur(d); return borderColor(cur,colorDegree);} );\n\t}\n}\n\n\n$scope.darkenAddress = function(address) {\n\tif (typeof degreeMap[address] != \"undefined\") {\n\t\tvar colorDegree = Math.min(degreeMap[address], 3);\n\t\tvar cur = findCur(force.nodes()[nodeMap[address]]);\n\t\tnodeGroup.select(\"#_\"+address).style(\"fill\", \"url(#gradient\"+cur+(colorDegree)+\")\").style(\"stroke-width\", (colorDegree==0?5:0.5)).style(\"stroke\", function(d){var cur = findCur(d); return borderColor(cur,colorDegree);} );\n\t}\n}\n\n\nfunction numberOfUnseenTrustLines(aNode) {\n\tvar output = 0;\n\tvar trustLines = aNode.trustLines;\n\tfor (var i=0; i<trustLines.length; i++) {\n\t\tif ((trustLines[i].limit!=0 || trustLines[i].limit_peer!=0) && isLineInvisible(aNode.account.Account, trustLines[i].account)) {\n\t\t\toutput++;\n\t\t}\n\t}\n\treturn output;\n}\n\nfunction isLineInvisible(source, target) {\n\tfor (var j=0; j<le_links.length; j++) {\n\t\tif ((le_links[j].source.account.Account==source && le_links[j].target.account.Account==target) ||\n\t\t\t(le_links[j].source.account.Account==target && le_links[j].target.account.Account==source)  ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nfunction colorNodes(nodeSelection, colorDegree) {\n\tnodeSelection.style(\"fill\", function(d) { \n\t\t\tvar cur = findCur(d);\n\t\t\treturn (\"url(#gradient\"+cur+colorDegree+\")\");\n\t\t})\n\t\t.style(\"stroke\", function(d){var cur = findCur(d); return borderColor(cur,colorDegree);} )\n\t\t.style(\"stroke-width\", 0.5 )\n\t\t.on(\"mouseover\", lightenNodeFunction(colorDegree))\n\t\t.on(\"mouseout\", darkenNodeFunction(colorDegree));\n\tif (colorDegree == 0) {\n\t\tnodeSelection.style(\"stroke-width\", 5);\n\t}\n}\n\nfunction reassignColors(address) {\n\tvar colorDegree = Math.min(degreeMap[address], 3);\n\tcolorNodes(svg.select(\"g#nodeGroup\").select(\"circle#_\"+address), colorDegree)\n\t\n\tfunction goon(counterparty) { // ...then reassign the colors of each counterparty too,\n\t\t//only if the new degree is lower than the previous one (or the degree is as yet unknown)\n\t\tif (typeof degreeMap[counterparty] == \"undefined\" || degreeMap[counterparty] > degreeMap[address]+1) {\n\t\t\tdegreeMap[counterparty] = degreeMap[address]+1;\n\t\t\treassignColors(counterparty);\n\t\t}\n\t}\n\tfor (var i=0; i<le_links.length; i++) {\n\t\tvar link = le_links[i];\n\t\tif (link.source.account.Account == address) { // If this address is party to the link...\n\t\t\tgoon(link.target.account.Account);\n\t\t} else if (link.target.account.Account == address) {\n\t\t\tgoon(link.source.account.Account);\n\t\t}\n\t}\n}\n\nfunction colorRogueNodes() {\n\tfor (var address in nodeMap) {\n\t\tif (typeof degreeMap[address] == \"undefined\") {\n\t\t\tdegreeMap[address] = Infinity;\n\t\t\tcolorNodes(svg.select(\"g#nodeGroup\").select(\"circle#_\"+address), 3);\n\t\t}\n\t}\t\n}\n\n\n\n\n\nfunction lineLength(lineElement) {\n\treturn Math.sqrt(Math.pow(lineElement.attr(\"x1\")-lineElement.attr(\"x2\"),2) + Math.pow(lineElement.attr(\"y1\")-lineElement.attr(\"y2\"),2));\n}\n\nfunction shine(onOrOff, address, cur) {\n\t$(\"#_\"+address).attr(\"filter\",(onOrOff ? \"url(#shine\"+cur+\")\" : \"none\"));\n}\n\n\n\nvar animatorLinks = [];\n\n\n\nfunction animateLink(onOrOff, speed, from, to, cur, callback) {\n\tif (typeof nodeMap[from] == \"undefined\" || typeof nodeMap[to] == \"undefined\") {\n\t\tsetTimeout(callback, 10.0/speed);\n\t} else {\n\t\tvar animator = $(\"#\" + from + \"_\" + to + \"_\" + cur);\n\t\tif (animator.length == 0) {\n\t\t\tanimatorLinks.push({source:nodes[nodeMap[from]], target:nodes[nodeMap[to]], value:100, currency:currency, strength:0});\n\t\t\tvar alink = svg.select(\"g#linkGroup\").selectAll(\"line.animator\").data(animatorLinks)\n\t\t\t\t.enter().append(\"svg:line\")\n\t\t\t\t.attr(\"x1\", function(d){ return d.source.x; })\n\t\t\t\t.attr(\"y1\", function(d){ return d.source.y; })\n\t\t\t\t.attr(\"x2\", function(d){ return d.target.x; })\n\t\t\t\t.attr(\"y2\", function(d){ return d.target.y; })\n\t\t\t\t.attr(\"class\", \"animator\")\n\t\t\t\t.attr(\"id\", from + \"_\" + to + \"_\" + cur )\n\t\t\t\t.style(\"stroke\",function(d){ return HIGH_SATURATION_COLORS[cur];} )\n\t\t\t\t.style(\"z-index\",\"2\")\n\t\t\t\t.style(\"stroke-dasharray\",\"0,999999\")\n\t\t\t\t.attr(\"stroke-width\", 10);\n\t\t\tanimator = $(\"#\" + from + \"_\" + to + \"_\" + cur);\n\t\t}\n\n\t\tanimator.css(\"display\",\"inherit\");\n\t\tvar pct = 1;\n\t\tvar interval = setInterval( function(){\n\t\t\tvar len = lineLength(animator) * (1-pct);\n\t\t\tif (onOrOff == true) { //If we're turning it on\n\t\t\t\tanimator.css(\"stroke-dasharray\",len+\", 999999\");\n\t\t\t} else { //If we're turning it off\n\t\t\t\tanimator.css(\"stroke-dasharray\",\"0, \"+len+\", 999999\");\n\t\t\t}\n\t\t\tpct -= speed;\n\t\t\tif (pct <= 0) {\n\t\t\t\tif (onOrOff == true) {\n\t\t\t\t\tanimator.css(\"stroke-dasharray\",\"\");\n\t\t\t\t} else {\n\t\t\t\t\tanimator.css(\"display\",\"none\");\n\t\t\t\t}\n\t\t\t\tclearInterval(interval);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}, 10 );\n\t}\n}\n\n\nfunction animateTransaction(tx) {\n\tvar cur;\n\n\t\n\tvar initialCur;\n\tif (tx.SendMax && tx.SendMax.currency) {\n\t\tinitialCur = tx.SendMax.currency;\n\t\tif(!HIGH_SATURATION_COLORS.hasOwnProperty(initialCur)) {initialCur = \"___\";}\n\t} else {\n\t\tinitialCur = \"XRP\";\n\t}\t\n\tshine(true, tx.Account, initialCur);\n\t\n\tif (tx.Amount.currency) {\n\t\tfinalCur = tx.Amount.currency;\n\t\tif(!HIGH_SATURATION_COLORS.hasOwnProperty(finalCur)) {finalCur = \"___\";}\n\t} else {\n\t\tfinalCur = \"XRP\";\n\t}\t\n\t\n\tvar finalCur;\n\tif (tx.Amount.currency) {\n\t\tfinalCur = tx.Amount.currency;\n\t\tif(!HIGH_SATURATION_COLORS.hasOwnProperty(finalCur)) {finalCur = \"___\";}\n\t} else {\n\t\tfinalCur = \"XRP\";\n\t}\n\t\n\tvar pathList;\n\tif (tx.Paths) {\n\t\tpathList = [];\n\t\tfor (var i=0; i<tx.Paths.length; i++) {\n\t\t\tvar thisOldPath = tx.Paths[i];\n\t\t\tvar thisPath = [];\n\t\t\tfor (var j=0; j<thisOldPath.length; j++) {\n\t\t\t\tif (thisOldPath[j].account) {\n\t\t\t\t\tthisPath.push(thisOldPath[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpathList.push(thisPath);\n\t\t}\n\t\tfor (var i=0; i<pathList.length; i++) {\n\t\t\tanimatePath(true, i);\n\t\t}\n\t} else {\n\t\tpathList = [[]];\n\t\tanimatePath(true, 0);\n\t}\n\t\n\tfunction animatePath(onOrOff, i) {\n\t\tif (i==pathList.length) {\n\t\t\tconsole.log(\"Done with every path!\");\n\t\t} else {\n\t\t\tvar path = pathList[i];\n\t\t\tvar lastNode = tx.Account;\n\t\t\tvar nextNode;\n\t\t\tvar speed = 0.01 * (path.length + 1);\n\t\t\tfunction animatePathLink(j) {\n\t\t\t\tif (j==path.length) {\n\t\t\t\t\tanimateLink(onOrOff, speed, lastNode, tx.Destination, finalCur, function(){shine(onOrOff, tx.Destination, finalCur); if(onOrOff) {shine(false, tx.Account); animatePath(false, i);} });\n\t\t\t\t} else {\n\t\t\t\t\tnextNode = path[j].account;\n\t\t\t\t\tif (path[j].currency) {\n\t\t\t\t\t\tcur = path[j].currency;\n\t\t\t\t\t\tif(!HIGH_SATURATION_COLORS.hasOwnProperty(cur)) {cur = \"___\";}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcur = \"XRP\";\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tanimateLink(onOrOff, speed, lastNode, nextNode, cur, function(){shine(onOrOff, nextNode, cur); animatePathLink(j+1)});\n\t\t\t\t\tlastNode = nextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tanimatePathLink(0);\n\t\t}\n\t}\n}\n\n\n\n\n\nvar lastNodeTouched = \"\";\n\nfunction stopExpandResume(d) {\n\tforce.stop();\n\texpandNode(d.account.Account);\n\tsetTimeout(force.resume,500);\n}\n\nfunction addNodes(degree) {\n\n\tforce.nodes(nodes).links(le_links);\n\tvar timer;\n\tvar colorDegree = Math.min(degree, 3);\n\tvar node = svg.select(\"g#nodeGroup\").selectAll(\"circle.node\").data(nodes)\n\t\t.enter().append(\"svg:circle\")\n\t\t.attr(\"class\", \"node\")\n\t\t.attr(\"id\", function(d) { return \"_\"+d.account.Account;})\n\t\t.attr(\"cx\", function(d) { return d.x; })\n\t\t.attr(\"cy\", function(d) { return d.y; })\n\t\t.attr(\"r\", nodeRadius )\n\t\t.attr(\"title\", function(d) { return d.account.Account; })\n\t\t.style(\"cursor\", \"pointer\")\n\t\t.on(\"touchstart\", function() {  } )\n\t\t.on(\"touchmove\", function(d) { lastNodeTouched=d.account.Account; } )\n\t\t.on(\"touchend\", function(d) { if (lastNodeTouched != d.account.Account) {stopExpandResume(d); lastNodeTouched=d.account.Account;} else {lastNodeTouched=\"\";} } )\n\t\t.on(\"click\", stopExpandResume );\n\tcolorNodes(node, colorDegree);\n\tnode.append(\"svg:title\").text( function(d) { return d.account.Account;} );\n\tnode.call(force.drag);\n\t\n\t\n\n\tvar link = svg.select(\"g#linkGroup\").selectAll(\"line.static\").data(force.links())\n\t\t.enter().append(\"svg:line\")\n\t\t.attr(\"class\",\"static\")\n\t\t.style(\"stroke\",\"#000\")\n\t\t.style(\"opacity\",\"0.2\")\n\t\t.attr(\"stroke-width\", linkOrNot);\n\n\n\tfunction arrowheadPath(radius, theta) {\n\t\tvar rCosTheta = radius*Math.cos(theta);\n\t\tvar rSinTheta = radius*Math.sin(theta);\n\t\treturn \"M 0 0 L \"+\n\t\t\trCosTheta+\" \"+rSinTheta+\" L \"+\n\t\t\t(rCosTheta+rSinTheta*Math.sqrt(3))+\" 0 L \"+\n\t\t\trCosTheta+\" \"+(-rSinTheta)+\" z\";\n\t}\n\tvar arrowhead = svg.select(\"g#arrowheadGroup\").selectAll(\"path.arrowhead\").data(force.links())\n\t\t.enter().append(\"svg:path\")\n\t\t.attr(\"class\", \"arrowhead\");\n\n\n\tarrowhead = setArrowheads(arrowhead);\n\t\n\tfunction euclidean(pointA, pointB) {\n\t\treturn Math.sqrt(Math.pow(pointA.x-pointB.x,2)\n\t\t\t+Math.pow(pointA.y-pointB.y,2));\n\t}\n\t\n\tfunction projection(distance, origin, towards) {\n\t\tvar farDistance = euclidean(origin, towards);\n\t\tvar scalar = distance/farDistance;\n\t\tvar xOutput = origin.x + (towards.x-origin.x)*scalar;\n\t\tvar yOutput = origin.y + (towards.y-origin.y)*scalar;\n\t\treturn {x:xOutput, y:yOutput};\n\t}\n\t\n\tfunction angle(pointA, pointB) {\n\t\treturn 180/Math.PI * Math.atan2(pointB.y-pointA.y, pointB.x-pointA.x);\n\t}\n\t\n\tfunction thetaValue(value) {\n\t\treturn value/(1+value) * 1.04719755 // max = 60 degrees in radians\n\t}\n\t\n\tfunction setArrowheads(selection) {\n\t\treturn selection\n\t\t\t.attr(\"transform\", function(d) {\n\t\t\t\tvar position = d.source;\n\t\t\t\treturn \"translate(\"+position.x+\",\"+position.y+\"), rotate(\"+angle(d.source,d.target)+\",0,0)\";\n\t\t\t})\n\t\t\t.attr(\"d\", function(d) {return arrowheadPath(parseFloat($(\"#_\"+d.source.account.Account).attr(\"r\")), thetaValue(d.value)); } )\n\t\t\t.style(\"fill\", function(d){ return (isLinkVisible(d) ? \"#000\" : \"none\"); } );\n\n\t}\n\n\t\n\tvar halo = svg.select(\"g#haloGroup\").selectAll(\"circle.halo\").data(nodes)\n\t\t.enter().append(\"svg:circle\")\n\t\t.attr(\"class\", \"halo\")\n\t\t.attr(\"id\", function(d) { return \"halo_\"+d.account.Account;})\n\t\t.attr(\"cx\", function(d) { return d.x; })\n\t\t.attr(\"cy\", function(d) { return d.y; })\n\t\t.attr(\"r\", function(d){ return HALO_MARGIN+nodeRadius(d);} )\n\t\t.style(\"fill\", \"none\" )\n\t\t.style(\"stroke\", \"none\" )\n\t\t.style(\"stroke-width\", 1 );\n\t\t\n\tforce.start();\n  \n\n\n\t\n\n\tforce.on(\"tick\", function(e) {\n\t\tvar node = svg.selectAll(\"circle.node\");\n\t\tvar halo = svg.selectAll(\"circle.halo\");\n\t\tvar arrowhead = svg.selectAll(\"path.arrowhead\");\n\t\tvar link = svg.selectAll(\"line\");\n\t\tnode.attr(\"cx\", function(d) { return d.x; })\n\t\t\t.attr(\"cy\", function(d) { return d.y; });\n\t\tlink.attr(\"x1\", function(d) {return d.source.x;})\n\t\t\t.attr(\"y1\", function(d) {return d.source.y;})\n\t\t\t.attr(\"x2\", function(d) {return d.target.x;})\n\t\t\t.attr(\"y2\", function(d) {return d.target.y;});\n\t\thalo.attr(\"cx\", function(d) { return d.x; })\n\t\t\t.attr(\"cy\", function(d) { return d.y; });\n\t\tsetArrowheads(arrowhead);\n\t});\n}\n\nfunction name_to_address(focus, erase, noExpand){//search nodes by ripple-name\nconsole.log($scope.address)\n\n//basicincome\nif(focus.length !== 34){\n\tvaultClient.getAuthInfo(focus, ripple_name);\n}\nelse refocus(focus, erase, noExpand)\n\n\tfunction ripple_name(err, data){\n\t\tconsole.log(data)\n\t\tif(err)console.log(err)\n\t\tvar authInfo = data\n\t\trefocus(authInfo.address, erase, noExpand)\n\t}\n}\n\n$scope.name_to_address = function(focus, erase, noExpand){//search nodes by ripple-name\n\n\n//basicincome\nif(focus.length !== 34){\n\tvaultClient.getAuthInfo(focus, ripple_name);\n}\nelse refocus(focus, erase, noExpand)\n\n\tfunction ripple_name(err, data){\n\t\tconsole.log(data)\n\t\tif(err)console.log(err)\n\t\tvar authInfo = data\n\t\trefocus(authInfo.address, erase, noExpand)\n\t}\n}\n\nfunction refocus(focus, erase, noExpand) {\n\t\n\n\tchangingFocus = true;\n\tif (erase) {\n\t\teraseGraph();\n\t}\n\twindow.location.hash = focus;\n\tlastFocalNode = focalNode;\n\tfocalNode = focus;\n\tnodeMap[focalNode] = nodes.length;\n\tnodes.push({x:0.5*w, y:hh/2, account:{Account:focalNode, Balance:0}, trustLines:[], balances:{} });\n\tdegreeMap = {};\n\tdegreeMap[focalNode] = 0;\n\tif (!noExpand) {\n\t\tserverGetLines(focalNode);\n\t}\n\taddNodes(0);\n\treassignColors(focalNode);\n\tcolorRogueNodes();\n\t//serverGetInfo(focalNode);\n\tupdateInformation(focus);\n  getNextTransactionPage();\n}\n\n\n\n$scope.commas = function(number){\n\tconsole.log(number)\n\t  var parts = number.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n\n\nfunction commas(number) {\n  var parts = number.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n\nfunction abbreviate(address) {\n\treturn address.slice(0,25)+\"...\";\n}\n\nfunction magnitude(oom) {\n  var mfo3 = Math.floor(oom/3);\n  var text = {1:\"K\", 2:\"M\", 3:\"B\", 4:\"T\", 5:\"Q\"}[mfo3];\n  var value;\n  if (text) {\n    value = Math.pow(1000, mfo3);\n  } else {\n    value = Math.pow(10, oom);\n    text = \"&times;10<sup>\"+(\"\"+oom).replace(\"-\",\"&#8209;\")+\"</sup>\";\n  }\n  return {value:value, text:text};\n}\n\nfunction roundNumber(number) {\n  var man = Math.abs(number);\n\tif (number == 0 || (man < 100000.00 && man > 0.00001)) {\n\t\treturn commas(Math.round(number*100)/100);\n\t} else {\n\t\tvar oom = Math.floor((Math.log(man)+0.00000000000001) / Math.LN10);\n    var mag = magnitude(oom);\n    var rounded = Math.round(number/mag.value*100)/100;\n\t\treturn commas(rounded) + mag.text;\n\t}\n}\n\n$scope.roundNumber = function(number) {\n  var man = Math.abs(number);\n\tif (number == 0 || (man < 100000.00 && man > 0.00001)) {\n\t\treturn commas(Math.round(number*100)/100);\n\t} else {\n\t\tvar oom = Math.floor((Math.log(man)+0.00000000000001) / Math.LN10);\n    var mag = magnitude(oom);\n    var rounded = Math.round(number/mag.value*100)/100;\n\t\treturn commas(rounded) + mag.text;\n\t}\n}\n\nfunction updateInformation(address) {\n\t$('#focus').val(address);\n\t\n\tfunction update_html(err, rippleName){\n\t\t\t$('#rippleName').text(\"~\"+rippleName);\n\t}\n\t\n\t$('#focalAddress').text(address);\n\t\n\t$vaultClient.vaultClient.getRippleName(address, \"https://id.ripple.com\", update_html)\n\n\n\n\tvar currencies = [];\n\tvar balances = getBalances(address);\n\t$scope.balances = balances\n\tfor (var cur in balances) {\n\t\tcurrencies.push(cur);\n\t}\n\tcurrencies.sort(function(a,b){return (Math.abs(balances[b])-Math.abs(balances[a]))});\n\t\n\tvar trustLines = nodes[nodeMap[address]].trustLines;\n\tif (!trustLines) {\n\t\ttrustLines = [];\n\t}\n\t\nupdate_basicincome_co_data()\nfunction update_basicincome_co_data(){\t\n//BASICINCOME.CO\n\n$MongoDB.get_consumption_outside_network(address, update_table)\n\nfunction update_table(data){\n\t\nif(data[0].total_amount>0){\t\n$scope.penalty = data[0].total_amount\t\n\t\n}\nelse $scope.penalty = 0\n}\n\n\nif($scope.network_type !='Dividend Pathways'){\n$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1] }\nconsole.log(COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1])\n\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")\n\n}\nelse {\n\t$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'DIV')][0][1] }\n\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")\n}\n\n\n\n$MongoDB.get_tax_blob(address, a)\n\t\nfunction a(data){\n\tif(data[0].total_amount>0){\t\n\n$scope.unpaid_tax = roundNumber(data[0].total_amount)\t\n\t}\n\telse $scope.unpaid_tax = 0\n}\t\n}\n\t\n\tfor (var i=0; i<currencies.length; i++) {\n\t\tvar cur = currencies[i];\n\t\t$scope.cur = cur\n\t\tvar trustLinesForCur = [];\n\t\tfor (var j=0; j<trustLines.length; j++) {\n\t\t\tvar trustLine = trustLines[j];\n\t\t\tif (trustLine.currency == cur) {\n\t\t\t\ttrustLinesForCur.push(trustLine);\n\t\t\t}\n\t\t}\n\t\t$scope.trustLinesForCur = trustLinesForCur\n\t\ttrustLinesForCur.sort(function(a,b){return Math.abs(b.balance)-Math.abs(a.balance);});\n\n\t\n\t}\n\t//updateTransactions(address);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar txAltText = {\n\t\"send\"       :\"Sent payment to...\",\n\t\"receive\"    :\"Received payment from...\",\n\t\"intermediate\":\"Intermediated payment of...\",\n\t\"sendfailed\" :\"Failed to send payment to...\",\n\t\"receivefailed\":\"Failed to receive payment from...\",\n\t\"intermediatefailed\":\"Failed to intermediate payment of...\",\n\t\"trustout\"   :\"Sent trust to...\",\n\t\"trustinfailed\"    :\"Failed to receive trust from...\",\n\t\"trustoutfailed\"   :\"Failed to send trust to...\",\n\t\"trustin\"    :\"Received trust from...\",\n\t\"offerout\"   :\"Made offer to give...\",\n\t\"offerin\"    :\"Accepted offer and got...\",\n\t\"offeroutfailed\"   :\"Failed to make offer to give...\",\n\t\"offerinfailed\"    :\"Failed to accept offer and get...\",\n\t\"canceloffer\":\"Canceled offer\",\n  \"accountset\":\"Edited account properties\"\n};\n\nfunction showTransactionWithHash(hash) {\n\tchangingFocus = true;\n\twindow.location.hash = hash;\n\tchangeMode(\"transaction\",transactionMap[hash]);\n}\nvar transactionMap = {};\n\t/*\nfunction updateTransactions(address, appending) {\n\tif (!appending) {\n\t\t$('#transactionTable').text(\"\");\n\t}\n\t$(\"#transactionThrobber\").remove();\n\tif (nodes[nodeMap[address]].transactions) {\n\t\tfor (var i=$('#transactionTable tr').length; i<nodes[nodeMap[address]].transactions.length; i++) {\n\t\t\tvar tx = nodes[nodeMap[address]].transactions[i].tx;\n\t\t\tvar meta = nodes[nodeMap[address]].transactions[i].meta;\n\t\t\tvar transactionType;\n\t\t\tvar counterparty = \"\";\n\t\t\tvar amount = null;\n\t\t\tvar currency = null;\n\t\t\tvar aissuer = null;\n\t\t\tvar secondAmount = null;\n\t\t\tvar secondCurrency = null;\n\t\t\tvar secondAissuer = null;\n\n\t\t\tif (tx.TransactionType == \"Payment\") {\n\t\t\t\tamount = meta.DeliveredAmount || tx.Amount;\n\t\t\t\tif (tx.Account == address) {\n\t\t\t\t\ttransactionType = \"send\";\n\t\t\t\t\tcounterparty = tx.Destination;\n\t\t\t\t}\n\t\t\t\telse if (tx.Destination == address) {\n\t\t\t\t\ttransactionType = \"receive\";\n\t\t\t\t\tcounterparty = tx.Account;\n\t\t\t\t} else {\n\t\t\t\t\ttransactionType = \"intermediate\";\n\t\t\t\t}\n\t\t\t} else if (tx.TransactionType == \"TrustSet\") {\n\t\t\t\tamount = tx.LimitAmount;\n\t\t\t\tif (tx.Account == address) {\n\t\t\t\t\ttransactionType = \"trustout\";\n\t\t\t\t\tcounterparty = tx.LimitAmount.issuer;\n\t\t\t\t}\n\t\t\t\telse if (tx.LimitAmount.issuer == address) {\n\t\t\t\t\ttransactionType = \"trustin\";\n\t\t\t\t\tcounterparty = tx.Account;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Could not interpret transaction TrustSet!\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tx.TransactionType == \"OfferCreate\") {\n\t\t\t\tif (tx.Account == address) {\n\t\t\t\t\ttransactionType = \"offerout\";\n\t\t\t\t\tamount = tx.TakerGets;\n\t\t\t\t\tsecondAmount = tx.TakerPays;\n\t\t\t\t} else {\n\t\t\t\t\t//console.log(\"An offer was made, but not by you. We must now scour the meta-data to find out how exactly this transaction affected you.\");\n\t\t\t\t\tvar affectedBalances = {};\n\t\t\t\t\tfor (var j=0; j<meta.AffectedNodes.length; j++) {\n\t\t\t\t\t\tvar mn = meta.AffectedNodes[j].ModifiedNode || meta.AffectedNodes[j].DeletedNode || meta.AffectedNodes[j].CreatedNode;\n\t\t\t\t\t\tvar LatestFields = mn.FinalFields || mn.NewFields;\n\t\t\t\t\t\tif (mn && LatestFields) {\n\t\t\t\t\t\t\tif (LatestFields.Account == address || (LatestFields.HighLimit && LatestFields.HighLimit.issuer == address) ) {\n\t\t\t\t\t\t\t\tvar let = mn.LedgerEntryType;\n\t\t\t\t\t\t\t\tif (let == \"AccountRoot\") {\n\t\t\t\t\t\t\t\t\tvar diff = LatestFields.Balance - (mn.PreviousFields ? mn.PreviousFields.Balance : 0);\n\t\t\t\t\t\t\t\t\tif (affectedBalances[\"XRP\"]) {\n\t\t\t\t\t\t\t\t\t\taffectedBalances[\"XRP\"]+=diff;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\taffectedBalances[\"XRP\"]=diff;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (let == \"RippleState\") {\n\t\t\t\t\t\t\t\t\t//console.log(\"Affected RippleState:\", mn);\n\t\t\t\t\t\t\t\t\t//Not sure why this is reversed, but that's the way it is:\n\t\t\t\t\t\t\t\t\tvar diff = 0-(LatestFields.Balance.value - (mn.PreviousFields ? mn.PreviousFields.Balance.value : 0));\n\t\t\t\t\t\t\t\t\tvar cur = LatestFields.Balance.currency;\n\t\t\t\t\t\t\t\t\tvar issuer = LatestFields.LowLimit.issuer;\n\t\t\t\t\t\t\t\t\tvar cip = cur;//+\":\"+issuer; //Do we need this?\n\t\t\t\t\t\t\t\t\t//console.log(\"Got/gave\", cip, \":\", diff);\n\t\t\t\t\t\t\t\t\tif (affectedBalances[cip]) {\n\t\t\t\t\t\t\t\t\t\taffectedBalances[cip]+=diff;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\taffectedBalances[cip]=diff;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//console.log(\"Affected my\", let,  mn);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//console.log(\"Did not affect me?\", mn);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar affectedKeys = Object.keys(affectedBalances)\n\t\t\t\t\tif (affectedKeys.length == 2) {\n\t\t\t\t\t\tvar fip = affectedBalances[affectedKeys[0]] > 0;\n\t\t\t\t\t\tvar posKey = fip > 0 ? 0 : 1;\n\t\t\t\t\t\tvar negKey = fip > 0 ? 1 : 0;\n\t\t\t\t\t\tvar positive = affectedBalances[affectedKeys[posKey]];\n\t\t\t\t\t\tvar negative = affectedBalances[affectedKeys[negKey]];\n\t\t\t\t\t\tif (positive * negative > 0) {\n\t\t\t\t\t\t\tconsole.log(\"Could not interpret as offerin.\");\n\t\t\t\t\t\t\tcontinue;\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttransactionType = \"offerin\";\n\t\t\t\t\t\t\tamount = affectedKeys[posKey]==\"XRP\" ? positive : {value: positive, currency: affectedKeys[posKey], issuer:issuer};\n\t\t\t\t\t\t\tsecondAmount = affectedKeys[negKey]==\"XRP\" ? -negative : {value: -negative, currency: affectedKeys[negKey], issuer:issuer};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"Could not interpret as offerin.\", affectedBalances);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (tx.TransactionType == \"OfferCancel\") {\n\t\t\t\ttransactionType = \"canceloffer\";\n\t\t\t} else if (tx.TransactionType == \"AccountSet\") {\n        transactionType = \"accountset\";\n      } else {console.log(\"Could not interpret transaction: \"+tx.transactionType);}\n\n\t\t\tif (amount) {\n\t\t\t\tif (amount.currency) {\n\t\t\t\t\tcurrency = amount.currency;\n\t\t\t\t\taissuer = amount.issuer;\n\t\t\t\t\tamount = amount.value;\n\t\t\t\t} else {\n\t\t\t\t\tcurrency = \"XRP\";\n\t\t\t\t\tamount = amount/1000000;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (secondAmount) {\n\t\t\t\tif (secondAmount.currency) {\n\t\t\t\t\tsecondCurrency = secondAmount.currency;\n\t\t\t\t\tsecondAissuer = secondAmount.issuer;\n\t\t\t\t\tsecondAmount = secondAmount.value;\n\t\t\t\t} else {\n\t\t\t\t\tsecondCurrency = \"XRP\";\n\t\t\t\t\tsecondAmount = secondAmount/1000000;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ttransactionMap[tx.hash] = tx;\n\t\t\ttransactionMap[tx.hash].meta = meta;\n\t\t\tvar success = meta.TransactionResult == \"tesSUCCESS\" ? \"\" : \"failed\";\n\t\t\tvar result =  meta.TransactionResult == \"tesSUCCESS\" ? \"\" : \"[\"+meta.TransactionResult+\"] \";\n\n\t\t\t$('#transactionTable').append(\n\t\t\t\t'<tr hash=\"'+tx.hash+'\">'+\n\t\t\t\t\t'<td style=\"width:10%;\"><div '+(transactionType=='send'||transactionType=='receive'||transactionType=='intermediate'?'oncontextmenu=\"animateInPlaceWithHash(\\''+tx.hash+'\\');return false;\" onclick=\"showTransactionWithHash(\\''+tx.hash+'\\');\"':'style=\"cursor:default;\"')+' class=\"'+transactionType+success+' icon\" title=\"'+result+txAltText[transactionType+success]+'\">&nbsp;</div></td>'+\n\t\t\t\t\t'<td style=\"width:90%\"'+(counterparty==\"\"?' colspan=\"1\"':'')+'><span style=\"float:left\"><span '+(aissuer&&!(transactionType=='trustin'||transactionType=='trustout')?'title=\"'+aissuer+'\"':'')+'>'+(amount?('<span class=\"bold amount small\" >'+commas(amount)+'</span> <span class=\"light small darkgray\" style=\"margin-right:5px\">'+currency+'</span></span>'+\n\t\t\t\t\t(secondAmount?' <i class=\"light small darkgray\" style=\"margin-right:5px\">for</i> <span '+(secondAissuer&&!(transactionType=='trustin'||transactionType=='trustout')?'title=\"'+secondAissuer+'\"':'')+'><span class=\"bold amount small\">'+commas(secondAmount)+'</span> <span class=\"light small darkgray\" style=\"margin-right:5px\">'+secondCurrency+'</span></span>':'')):'')+\n\t\t\t\t\tagoDate(tx.date)+'</span>'+\n\t\t\t\t\t(counterparty!=\"\"?'<span style=\"display:block; margin-top:3px; overflow:hidden; text-overflow:ellipsis;\" class=\"light address right\"><span style=\"cursor:pointer;\" '+\n\t\t\t\t\t\t\t'onmouseover=\"lightenAddress(\\''+counterparty+'\\');\"'+\n\t\t\t\t\t\t\t'onmouseout=\"darkenAddress(\\''+counterparty+'\\');\"'+\n\t\t\t\t\t\t\t'onclick=\"expandNode(\\''+counterparty+'\\');\">'+//\"HASH:\"+tx.hash+\n\t\t\t\t\t\t\tcounterparty+'</span></span></td>' : '')+\n\t\t\t\t\t//'<td class=\"marginalcell\"/>'+\n\t\t\t\t'</tr>');\n\n\t\t}\n\t\t\n\t\tif (!nodes[nodeMap[address]].transactionsFinished) { //Are there more?\n\t\t\t$('#transactionTable').append('<tr id=\"transactionThrobber\"><td colspan=3 style=\"text-align:center; padding:10px\"><img src=\"throbber4.gif\" width=30 height=30 /></td></tr>');\n\t\t\t$('#transactionThrobber').bind('inview', function (event, visible) {\n\t\t\t\tif (visible == true) {\n\t\t\t\t\tgetNextTransactionPage();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log(\"Looks like we're finished?\", nodes[nodeMap[address]]);\n\t\t}\n\n\t}\n}\n*/\n\nfunction animateInPlaceWithHash(hash) {\n\tvar tx = transactionMap[hash];\n\t//walk the paths to see if any nodes need to be added.\n\twalkPaths(tx);\n\tanimateTransaction(tx);\n}\n\n\nfunction agoDate(secondsSince2000) {\n\tvar currentTime = new Date().getTime() / 1000 - UNIX_RIPPLE_TIME;\n\tvar secondsAgo = currentTime-parseInt(secondsSince2000);\n\tvar number;\n\tvar unit;\n\tif (secondsAgo < 1) {\n\t\tnumber = 0;\n\t\tunit = \"moment\";\n\t} else if (secondsAgo < 60) {\n\t\tnumber = Math.floor(secondsAgo);\n\t\tunit = \"second\";\n\t} else if (secondsAgo < 3600) {\n\t\tnumber = Math.floor(secondsAgo/60);\n\t\tunit = \"minute\";\n\t} else if (secondsAgo < 86400) {\n\t\tnumber = Math.floor(secondsAgo/3600);\n\t\tunit = \"hour\";\n\t} else if (secondsAgo < 604800) {\n\t\tnumber = Math.floor(secondsAgo/86400);\n\t\tunit = \"day\";\n\t} else if (secondsAgo < 2629746) {\n\t\tnumber = Math.floor(secondsAgo/604800);\n\t\tunit = \"week\";\n\t} else if (secondsAgo < 31556952) {\n\t\tnumber = Math.floor(secondsAgo/2629746);\n\t\tunit = \"month\";\n\t} else {\n\t\tnumber = Math.floor(secondsAgo/31556952);\n\t\tunit = \"year\";\n\t}\n\tif (number != 1) {\n\t\tunit += \"s\"\n\t}\n\tif (number == 0) {\n\t\tnumber = \"\";\n\t}\n\t\n\tvar d = new Date(0);\n\td.setUTCSeconds(secondsSince2000+UNIX_RIPPLE_TIME);\n\treturn '<span style=\"margin-right:5px\" class=\"light small mediumgray date\" title=\"'+d.toUTCString()+'\">'+number+\" \"+unit+' ago</span>';\n}\n\nfunction absoluteDateOnly(secondsSince2000) {\n\tvar d = new Date(0);\n\td.setUTCSeconds(secondsSince2000+UNIX_RIPPLE_TIME);\n\treturn d.getUTCDate()+' '+['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'][d.getUTCMonth()]+' '+d.getUTCFullYear()\n}\n\nfunction absoluteTimeOnly(secondsSince2000) {\n\tvar d = new Date(0);\n\td.setUTCSeconds(secondsSince2000+UNIX_RIPPLE_TIME);\n\treturn d.getUTCHours()+':'+(d.getUTCMinutes()<10 ? '0'+d.getUTCMinutes() : d.getUTCMinutes())+':'+(d.getUTCSeconds()<10 ? '0'+d.getUTCSeconds() : d.getUTCSeconds());\n}\n\n\n\nfunction absoluteDate(secondsSince2000) {\n\tvar d = new Date(0);\n\td.setUTCSeconds(secondsSince2000+UNIX_RIPPLE_TIME);\n\treturn '<span class=\"light small mediumgray date\" title=\"'+absoluteTimeOnly(secondsSince2000)+'\">'+absoluteDateOnly(secondsSince2000)+'</span>';\n}\nfunction absoluteTime(secondsSince2000) {\n\tvar d = new Date(0);\n\td.setUTCSeconds(secondsSince2000+UNIX_RIPPLE_TIME);\n\treturn '<span class=\"light small mediumgray date\" title=\"'+absoluteDateOnly(secondsSince2000)+'\">'+absoluteTimeOnly(secondsSince2000)+'</span>';\n}\n\n\n\n\nfunction getBalances(address) {\n\tvar balances = {};\n\tif (nodes[nodeMap[address]].trustLines) {\n\t\tfor (var i=0; i<nodes[nodeMap[address]].trustLines.length; i++) {\n\t\t\tvar trustLine = nodes[nodeMap[address]].trustLines[i];\n\t\t\tif (balances[trustLine.currency]) {\n\t\t\t\tbalances[trustLine.currency] += parseFloat(trustLine.balance);\n\t\t\t} else {\n\t\t\t\tbalances[trustLine.currency] = parseFloat(trustLine.balance);\n\t\t\t}\n\t\t}\n\t}\n\treturn balances;\n}\n\n\n$scope.getBalances = function(address) {\n\tvar balances = {};\n\tif (nodes[nodeMap[address]].trustLines) {\n\t\tfor (var i=0; i<nodes[nodeMap[address]].trustLines.length; i++) {\n\t\t\tvar trustLine = nodes[nodeMap[address]].trustLines[i];\n\t\t\tif (balances[trustLine.currency]) {\n\t\t\t\tbalances[trustLine.currency] += parseFloat(trustLine.balance);\n\t\t\t} else {\n\t\t\t\tbalances[trustLine.currency] = parseFloat(trustLine.balance);\n\t\t\t}\n\t\t}\n\t}\n\treturn balances;\n}\n\n\nfunction linkOrNot(d) {\n\tif(currentCurrency==\"XRP\" || currentCurrency==d.currency) {\n\t\tvar o = 5*Math.pow(Math.log(1+d.value),0.3333);;\n\t\treturn o;\n\t} \n\telse{return 0;}\n}\n\nfunction isLinkVisible(d) {\n\treturn currentCurrency==\"XRP\" || currentCurrency==d.currency\n}\n\nfunction changeCurrency(newCurrency) {\n\tvar isOther = (newCurrency == '___');\n\tif (isOther && $('#otherCurrency').css('font-style')!='italic') {\n\t\tnewCurrency = $('#otherCurrency').attr('value');\n\t}\n\tif (newCurrency == \"___\") {\n\t\t$(\"#otherCurrency\").css(\"display\",\"block\");\n\t} else {\n\t\tif (isOther) {\n\t\t\t$(\"#otherCurrency\").css(\"display\",\"block\");\n\t\t} else {\n\t\t\t$(\"#otherCurrency\").css(\"display\",\"none\");\n\t\t}\n\t\tcurrentCurrency = newCurrency;\n\t\tdegreeMap = {};\n\t\tdegreeMap[focalNode] = 0;\n\t\treassignColors(focalNode);\n\t\tcolorRogueNodes();\n\t\tupdated = svg.select(\"g#nodeGroup\").selectAll(\"circle.node\");\n\t\tupdated.attr(\"r\", nodeRadius );\n\t\tsvg.select(\"g#haloGroup\").selectAll(\"circle.halo\").attr(\"r\", function(d){return HALO_MARGIN+nodeRadius(d);} );\n\t\tsvg.select(\"g#linkGroup\").selectAll(\"line.static\").attr(\"stroke-width\", linkOrNot);\n\t\tforce.start();\n\t}\n}\n\n\n\n$scope.toggleExpansion = function (row) {\n\tconsole.log(\"hejhejeh\")\n\tvar cur = row.getAttribute(\"sublistid\");\n\tvar numberOfSubrows = parseInt(row.getAttribute(\"numberofsubrows\"));\n\tvar expander = document.getElementById(cur+\"Expander\");\n\tif (expander.innerHTML == \"+\") {\n\t\t$('#'+cur+'Inner').animate({height:(11+(numberOfSubrows+1)*25.5)+'px'});\n\t\t\t\t$('#'+cur).show()\n\t\texpander.innerHTML = \"&ndash;\";\n\t} else {\n\t\t$('#'+cur+'Inner').animate({height:'0px'}, {complete: function(){$('#'+cur).hide();} });\n\t\texpander.innerHTML = \"+\";\n\t}\n}\n\n/*\nfunction focusOtherCurrency(that) {\n\tif ($(that).css('font-style')=='italic') {\n\t\t$(that).css('font-style','inherit').css('color','inherit').attr('value','');\n\t}\n}\n\nfunction blurOtherCurrency(that) {\n\tif ($(that).attr('value')=='' || $(that).css('font-style')=='italic') { \n\t\t$(that).css('font-style','italic').css('color','#999').attr('value','other');\n\t} else {\n\t\tvar upper=$(that).attr('value').toUpperCase();\n\t\t$(that).attr('value',upper);\n\t\tchangeCurrency('___');\n\t}\n}\n*/\n\nwindow.onhashchange = function(){\n\tif (!changingFocus) {\n\t\tif (window.location.hash == \"\" || window.location.hash == \"#\") {\n\t\t\trefocus(REFERENCE_NODE, true);\n\t\t} else if (window.location.hash.charAt(1) == \"r\") {\n\t\t\tif (nodeMap[window.location.hash.substring(1)]) {\n\t\t\t\texpandNode(window.location.hash.substring(1));\n\t\t\t}\n\t\t} else if (\"0123456789ABCDEF\".indexOf(window.location.hash.charAt(1)) != -1) {\n\t\t\tshowTransactionWithHash(window.location.hash.substring(1));\n\t\t}\n    \n\t} else {\n\t}\n\tchangingFocus = false;\n};\n\n\n\t$(function () {$('.scroll-pane').jScrollPane({autoReinitialise: true, hideFocus: true});});\n\t$(function () {$(\"#currency\").selectbox();});\n\t$(\"#focus\").keyup(function(event){\n\t\tif(event.keyCode == 13){\n\t\t\t$(\"#searchButton\").click();\n\t\t}\n\t});\n\t$(\"#otherCurrency\").keyup(function(event){\n\t\tif(event.keyCode == 13){\n\t\t\t$(this).blur();\n\t\t}\n\t});\n\tupdateInformation(focalNode);\n\t\n  }]);","undoManager":{"mark":98,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":1016,"column":30},"end":{"row":1016,"column":31},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":1014,"column":23},"end":{"row":1014,"column":26},"action":"remove","lines":["DIV"]},{"start":{"row":1014,"column":23},"end":{"row":1014,"column":24},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":1014,"column":24},"end":{"row":1014,"column":25},"action":"insert","lines":["A"]}]}],[{"group":"doc","deltas":[{"start":{"row":1014,"column":25},"end":{"row":1014,"column":26},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":1000,"column":23},"end":{"row":1000,"column":26},"action":"remove","lines":["DIV"]},{"start":{"row":1000,"column":23},"end":{"row":1000,"column":24},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":1000,"column":24},"end":{"row":1000,"column":25},"action":"insert","lines":["A"]}]}],[{"group":"doc","deltas":[{"start":{"row":1000,"column":25},"end":{"row":1000,"column":26},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":1002,"column":28},"end":{"row":1002,"column":31},"action":"remove","lines":["___"]},{"start":{"row":1002,"column":28},"end":{"row":1002,"column":29},"action":"insert","lines":["D"]}]}],[{"group":"doc","deltas":[{"start":{"row":1002,"column":29},"end":{"row":1002,"column":30},"action":"insert","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":1002,"column":30},"end":{"row":1002,"column":31},"action":"insert","lines":["V"]}]}],[{"group":"doc","deltas":[{"start":{"row":1016,"column":28},"end":{"row":1016,"column":31},"action":"remove","lines":["SAF"]},{"start":{"row":1016,"column":28},"end":{"row":1016,"column":29},"action":"insert","lines":["D"]}]}],[{"group":"doc","deltas":[{"start":{"row":1016,"column":29},"end":{"row":1016,"column":30},"action":"insert","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":1016,"column":30},"end":{"row":1016,"column":31},"action":"insert","lines":["V"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":77},"end":{"row":1701,"column":80},"action":"remove","lines":["SAF"]},{"start":{"row":1701,"column":77},"end":{"row":1701,"column":78},"action":"insert","lines":["D"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":78},"end":{"row":1701,"column":79},"action":"insert","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":78},"end":{"row":1701,"column":79},"action":"remove","lines":["I"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":77},"end":{"row":1701,"column":78},"action":"remove","lines":["D"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":77},"end":{"row":1701,"column":78},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":78},"end":{"row":1701,"column":79},"action":"insert","lines":["A"]}]}],[{"group":"doc","deltas":[{"start":{"row":1701,"column":79},"end":{"row":1701,"column":80},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":27},"end":{"row":1706,"column":28},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":28},"end":{"row":1706,"column":29},"action":"insert","lines":["+"]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":29},"end":{"row":1706,"column":30},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":30},"end":{"row":1706,"column":32},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":31},"end":{"row":1706,"column":32},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":32},"end":{"row":1706,"column":33},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":33},"end":{"row":1706,"column":34},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":1706,"column":34},"end":{"row":1706,"column":35},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":1021,"column":1},"end":{"row":1022,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":0},"end":{"row":1023,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1023,"column":0},"end":{"row":1030,"column":1},"action":"insert","lines":["if($scope.network_type !='Dividend Pathways'){","$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1] }","console.log(COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'SAF')][0][1])","}","else {","\t$scope.myStyle = {'fill' : COLOR_TABLE[(COLOR_TABLE.hasOwnProperty(cur)?cur:'DIV')][0][1] }","\tconsole.log($scope.myStyle + \"haha\")","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":13},"end":{"row":1029,"column":14},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":14},"end":{"row":1029,"column":15},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":15},"end":{"row":1029,"column":16},"action":"insert","lines":["O"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":16},"end":{"row":1029,"column":17},"action":"insert","lines":["N"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":17},"end":{"row":1029,"column":18},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":18},"end":{"row":1029,"column":19},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":19},"end":{"row":1029,"column":20},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":20},"end":{"row":1029,"column":21},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":21},"end":{"row":1029,"column":22},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":18},"end":{"row":1029,"column":22},"action":"remove","lines":["stri"]},{"start":{"row":1029,"column":18},"end":{"row":1029,"column":29},"action":"insert","lines":["stringify()"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":28},"end":{"row":1029,"column":29},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":42},"end":{"row":1029,"column":43},"action":"remove","lines":[" "]},{"start":{"row":1029,"column":42},"end":{"row":1029,"column":43},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1029,"column":43},"end":{"row":1029,"column":44},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":13},"end":{"row":1715,"column":14},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":14},"end":{"row":1715,"column":15},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":15},"end":{"row":1715,"column":16},"action":"insert","lines":["O"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":16},"end":{"row":1715,"column":17},"action":"insert","lines":["N"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":17},"end":{"row":1715,"column":18},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":18},"end":{"row":1715,"column":19},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":19},"end":{"row":1715,"column":20},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":20},"end":{"row":1715,"column":21},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":21},"end":{"row":1715,"column":22},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":22},"end":{"row":1715,"column":23},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":23},"end":{"row":1715,"column":24},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":24},"end":{"row":1715,"column":25},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":25},"end":{"row":1715,"column":26},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":26},"end":{"row":1715,"column":27},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":27},"end":{"row":1715,"column":28},"action":"insert","lines":["("]}]}],[{"group":"doc","deltas":[{"start":{"row":1715,"column":52},"end":{"row":1715,"column":53},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1711,"column":75},"end":{"row":1712,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1712,"column":0},"end":{"row":1713,"column":0},"action":"insert","lines":["\tconsole.log(JSON.stringify($scope.myStyle + \"haha\"))",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1025,"column":75},"end":{"row":1026,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":0},"end":{"row":1027,"column":0},"action":"insert","lines":["\tconsole.log(JSON.stringify($scope.myStyle + \"haha\"))",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":51},"end":{"row":1026,"column":52},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":42},"end":{"row":1026,"column":43},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0},"action":"remove","lines":["\tconsole.log(JSON.stringify($scope.myStyle + \"haha\"))",""]},{"start":{"row":1714,"column":0},"end":{"row":1715,"column":0},"action":"insert","lines":["\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1719,"column":0},"end":{"row":1720,"column":0},"action":"remove","lines":["\tconsole.log(JSON.stringify($scope.myStyle + \"haha\"))",""]},{"start":{"row":1719,"column":0},"end":{"row":1720,"column":0},"action":"insert","lines":["\tconsole.log(JSON.stringify($scope.myStyle) + \"haha\")",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1032,"column":1},"end":{"row":1033,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1033,"column":0},"end":{"row":1033,"column":16},"action":"insert","lines":["$scope.$apply() "]}]}],[{"group":"doc","deltas":[{"start":{"row":1033,"column":0},"end":{"row":1034,"column":0},"action":"remove","lines":["$scope.$apply() ",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":0},"end":{"row":1023,"column":0},"action":"insert","lines":["$scope.$apply() ",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":14},"end":{"row":1022,"column":16},"action":"remove","lines":[") "]}]}],[{"group":"doc","deltas":[{"start":{"row":1033,"column":1},"end":{"row":1034,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1034,"column":0},"end":{"row":1034,"column":2},"action":"insert","lines":[") "]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":14},"end":{"row":1022,"column":15},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":15},"end":{"row":1022,"column":16},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":16},"end":{"row":1022,"column":17},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":17},"end":{"row":1022,"column":18},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":18},"end":{"row":1022,"column":19},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":19},"end":{"row":1022,"column":20},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":20},"end":{"row":1022,"column":21},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":21},"end":{"row":1022,"column":22},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":22},"end":{"row":1022,"column":24},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":24},"end":{"row":1022,"column":25},"action":"insert","lines":["{"]}]}],[{"group":"doc","deltas":[{"start":{"row":1033,"column":1},"end":{"row":1033,"column":2},"action":"insert","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":1022,"column":0},"end":{"row":1022,"column":25},"action":"remove","lines":["$scope.$apply(function(){"]}]}],[{"group":"doc","deltas":[{"start":{"row":1024,"column":46},"end":{"row":1024,"column":71},"action":"insert","lines":["$scope.$apply(function(){"]}]}],[{"group":"doc","deltas":[{"start":{"row":1025,"column":91},"end":{"row":1026,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":0},"end":{"row":1026,"column":1},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":0},"end":{"row":1026,"column":1},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":0},"end":{"row":1026,"column":1},"action":"insert","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":1},"end":{"row":1026,"column":2},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1031,"column":6},"end":{"row":1031,"column":31},"action":"insert","lines":["$scope.$apply(function(){"]}]}],[{"group":"doc","deltas":[{"start":{"row":1032,"column":92},"end":{"row":1032,"column":93},"action":"insert","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":1032,"column":93},"end":{"row":1032,"column":94},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1035,"column":1},"end":{"row":1035,"column":2},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":1035,"column":0},"end":{"row":1035,"column":1},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":1034,"column":1},"end":{"row":1034,"column":2},"action":"remove","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":1032,"column":94},"end":{"row":1033,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1033,"column":0},"end":{"row":1033,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":2},"end":{"row":1027,"column":0},"action":"insert","lines":["",""]}]}]]},"ace":{"folds":[{"start":{"row":791,"column":46},"end":{"row":800,"column":0},"placeholder":"..."},{"start":{"row":938,"column":19},"end":{"row":942,"column":0},"placeholder":"..."},{"start":{"row":945,"column":28},"end":{"row":955,"column":0},"placeholder":"..."},{"start":{"row":957,"column":26},"end":{"row":968,"column":0},"placeholder":"..."},{"start":{"row":970,"column":23},"end":{"row":975,"column":0},"placeholder":"..."},{"start":{"row":979,"column":61},"end":{"row":994,"column":0},"placeholder":"..."}],"scrolltop":13752.8890914917,"scrollleft":0,"selection":{"start":{"row":1027,"column":0},"end":{"row":1027,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1005,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1419919474431}